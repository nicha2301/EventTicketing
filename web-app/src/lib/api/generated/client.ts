/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Event Ticketing API
 * RESTful API for Event Ticketing System
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import { http } from '../http';
export type GetDetailedDemographics200 = {[key: string]: unknown};

export type GetRegistrationTimeline200 = {[key: string]: number};

export type GetKPIDashboard200 = {[key: string]: unknown};

export type GetROIAnalysis200 = {[key: string]: unknown};

export type ActivateUser1Params = {
token: string;
};

export type GetCommentsByStatusParams = {
page?: number;
size?: number;
};

export type GetRootCommentsByEventIdParams = {
page?: number;
size?: number;
};

export type GetCommentsByCurrentUserParams = {
page?: number;
size?: number;
};

export type GetRepliesByCommentIdParams = {
page?: number;
size?: number;
};

export type GetEventsByCategoryParams = {
pageable: Pageable;
};

export type GetFeaturedEventsParams = {
limit?: number;
};

export type GetNearbyEventsParams = {
latitude: number;
longitude: number;
radius?: number;
pageable: Pageable;
};

export type GetEventsByOrganizerParams = {
pageable: Pageable;
};

export type SearchEventsParams = {
keyword?: string;
categoryId?: string;
startDate?: string;
endDate?: string;
locationId?: string;
radius?: number;
latitude?: number;
longitude?: number;
minPrice?: number;
maxPrice?: number;
status?: string;
pageable: Pageable;
};

export type GetUpcomingEventsParams = {
limit?: number;
};

export type GetLocationsByCityParams = {
pageable: Pageable;
};

export type GetNearbyLocationsParams = {
latitude: number;
longitude: number;
radius?: number;
pageable: Pageable;
};

export type GetPopularLocationsParams = {
limit?: number;
};

export type SearchLocationsByNameParams = {
name: string;
pageable: Pageable;
};

export type GetNotificationsByTypeParams = {
pageable: Pageable;
};

export type GetUnreadNotificationsParams = {
pageable: Pageable;
};

export type DeleteAllNotifications200 = {[key: string]: number};

export type GetUserNotificationsParams = {
pageable: Pageable;
};

export type GetReportedRatingsParams = {
page?: number;
size?: number;
};

export type GetRatingsByEventIdParams = {
page?: number;
size?: number;
};

export type GetRatingsByCurrentUserParams = {
page?: number;
size?: number;
};

export type GetCheckInStatistics200 = {[key: string]: unknown};

export type GetDailyRevenue200 = {[key: string]: unknown};

export type GetDailyRevenueParams = {
eventId?: string;
startDate: string;
endDate: string;
};

export type GetTicketSalesByType200 = {[key: string]: unknown};

export type GetReportsByEventParams = {
pageable: Pageable;
};

export type GetReportsByTypeParams = {
pageable: Pageable;
};

export type GetReportsByCurrentUserParams = {
pageable: Pageable;
};

export type CheckTicketAvailabilityParams = {
quantity?: number;
};

export type GetTicketsByEventIdParams = {
pageable: Pageable;
};

export type GetMyTicketsStatus = typeof GetMyTicketsStatus[keyof typeof GetMyTicketsStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetMyTicketsStatus = {
  RESERVED: 'RESERVED',
  PAID: 'PAID',
  CHECKED_IN: 'CHECKED_IN',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED',
} as const;

export type GetMyTicketsParams = {
pageable: Pageable;
status?: GetMyTicketsStatus;
};

export type RequestPasswordResetParams = {
email: string;
};

export type GetAllCategoriesParams = {
pageable: Pageable;
includeInactive?: boolean;
};

export type CreateEventWithImagesBody = {
  images: Blob[];
};

export type CreateEventWithImagesParams = {
event: string;
primaryImageIndex?: number;
};

export type GetTicketTypesByEventIdParams = {
pageable: Pageable;
};

export type UploadEventImageBody = {
  image: Blob;
};

export type UploadEventImageParams = {
isPrimary?: boolean;
};

export type GetAllEventsParams = {
pageable: Pageable;
};

export type GetAllLocationsParams = {
pageable: Pageable;
};

export type ProcessMomoIpnBody = {[key: string]: unknown};

export type UpdatePaymentStatusParams = {
orderId: string;
paymentId: string;
status: string;
};

export type UpdateUserRoleParams = {
role: string;
};

export type GetAllUsersParams = {
page?: number;
size?: number;
sortBy?: string;
sortDir?: string;
};

export type MarkAllAsRead200 = {[key: string]: number};

export interface ApiResponseInteger {
  data?: number;
  message?: string;
  success: boolean;
}

export type AttendeeAnalyticsDtoRegistrationTimeline = {[key: string]: number};

export type AttendeeAnalyticsDtoLocationDistribution = {[key: string]: number};

export type AttendeeAnalyticsDtoGenderDistribution = {[key: string]: number};

export type AttendeeAnalyticsDtoAgeDistribution = {[key: string]: number};

export interface AttendeeAnalyticsDto {
  ageDistribution: AttendeeAnalyticsDtoAgeDistribution;
  genderDistribution: AttendeeAnalyticsDtoGenderDistribution;
  locationDistribution: AttendeeAnalyticsDtoLocationDistribution;
  registrationTimeline: AttendeeAnalyticsDtoRegistrationTimeline;
  totalCheckedIn: number;
  totalRegistered: number;
}

export interface PaymentMethodStats {
  averageAmount: number;
  percentage: number;
  totalAmount: number;
  transactionCount: number;
}

export type PaymentMethodsDtoPaymentMethods = {[key: string]: PaymentMethodStats};

export interface PaymentMethodsDto {
  averageTransactionAmount: number;
  paymentMethods: PaymentMethodsDtoPaymentMethods;
  totalAmount: number;
  totalTransactions: number;
}

export interface EventPerformanceDto {
  attendanceRate: number;
  averageRating: number;
  costPerAttendee?: number;
  npsScore?: number;
  profitMargin: number;
  revenueTarget?: number;
  roi: number;
  ticketSalesRate: number;
  ticketsSold: number;
  ticketsTarget?: number;
  totalCost?: number;
  totalRevenue: number;
}

export interface PageCategoryDto {
  content?: CategoryDto[];
  empty?: boolean;
  first?: boolean;
  last?: boolean;
  number?: number;
  numberOfElements?: number;
  pageable?: PageableObject;
  size?: number;
  sort?: SortObject;
  totalElements?: number;
  totalPages?: number;
}

export interface ApiResponsePageCategoryDto {
  data?: PageCategoryDto;
  message?: string;
  success: boolean;
}

export interface CommentPageResponse {
  comments: CommentResponse[];
  currentPage: number;
  totalItems: number;
  totalPages: number;
}

export interface ApiResponseListDeviceTokenResponse {
  data?: DeviceTokenResponse[];
  message?: string;
  success: boolean;
}

export interface ApiResponseListEventDto {
  data?: EventDto[];
  message?: string;
  success: boolean;
}

export interface PageTicketTypeDto {
  content?: TicketTypeDto[];
  empty?: boolean;
  first?: boolean;
  last?: boolean;
  number?: number;
  numberOfElements?: number;
  pageable?: PageableObject;
  size?: number;
  sort?: SortObject;
  totalElements?: number;
  totalPages?: number;
}

export interface ApiResponsePageTicketTypeDto {
  data?: PageTicketTypeDto;
  message?: string;
  success: boolean;
}

export interface ApiResponseListImageDto {
  data?: ImageDto[];
  message?: string;
  success: boolean;
}

export interface PageEventDto {
  content?: EventDto[];
  empty?: boolean;
  first?: boolean;
  last?: boolean;
  number?: number;
  numberOfElements?: number;
  pageable?: PageableObject;
  size?: number;
  sort?: SortObject;
  totalElements?: number;
  totalPages?: number;
}

export interface ApiResponsePageEventDto {
  data?: PageEventDto;
  message?: string;
  success: boolean;
}

export interface ApiResponseListLocationDto {
  data?: LocationDto[];
  message?: string;
  success: boolean;
}

export interface PageLocationDto {
  content?: LocationDto[];
  empty?: boolean;
  first?: boolean;
  last?: boolean;
  number?: number;
  numberOfElements?: number;
  pageable?: PageableObject;
  size?: number;
  sort?: SortObject;
  totalElements?: number;
  totalPages?: number;
}

export interface ApiResponsePageLocationDto {
  data?: PageLocationDto;
  message?: string;
  success: boolean;
}

export interface NotificationCountResponse {
  unreadCount: number;
}

export type RatingStatisticsResponseRatingCounts = {[key: string]: number};

export interface RatingStatisticsResponse {
  averageRating: number;
  eventId: string;
  ratingCounts: RatingStatisticsResponseRatingCounts;
  totalRatings: number;
}

export interface RatingPageResponse {
  currentPage: number;
  ratings: RatingResponse[];
  totalItems: number;
  totalPages: number;
}

export interface ReportSummaryDto {
  dateGenerated: string;
  filePath?: string;
  id?: number;
  name: string;
  type: string;
}

export interface PageReportSummaryDto {
  content?: ReportSummaryDto[];
  empty?: boolean;
  first?: boolean;
  last?: boolean;
  number?: number;
  numberOfElements?: number;
  pageable?: PageableObject;
  size?: number;
  sort?: SortObject;
  totalElements?: number;
  totalPages?: number;
}

export interface ApiResponseListTicketPurchaseResponseDto {
  data?: TicketPurchaseResponseDto[];
  message?: string;
  success: boolean;
}

export interface SortObject {
  empty?: boolean;
  sorted?: boolean;
  unsorted?: boolean;
}

export interface PageableObject {
  offset?: number;
  paged?: boolean;
  pageNumber?: number;
  pageSize?: number;
  sort?: SortObject;
  unpaged?: boolean;
}

export interface PageNotificationResponse {
  content?: NotificationResponse[];
  empty?: boolean;
  first?: boolean;
  last?: boolean;
  number?: number;
  numberOfElements?: number;
  pageable?: PageableObject;
  size?: number;
  sort?: SortObject;
  totalElements?: number;
  totalPages?: number;
}

export interface PageTicketDto {
  content?: TicketDto[];
  empty?: boolean;
  first?: boolean;
  last?: boolean;
  number?: number;
  numberOfElements?: number;
  pageable?: PageableObject;
  size?: number;
  sort?: SortObject;
  totalElements?: number;
  totalPages?: number;
}

export interface ApiResponsePageTicketDto {
  data?: PageTicketDto;
  message?: string;
  success: boolean;
}

export interface Pageable {
  /** @minimum 0 */
  page?: number;
  /** @minimum 1 */
  size?: number;
  sort?: string[];
}

export interface ApiResponsePagedResponseUserDto {
  data?: PagedResponseUserDto;
  message?: string;
  success: boolean;
}

export interface GoogleAuthRequestDto {
  /** @minLength 1 */
  email: string;
  /** @minLength 1 */
  idToken: string;
  /** @minLength 1 */
  name: string;
  profilePictureUrl?: string;
}

export interface LoginRequestDto {
  /** @minLength 1 */
  email: string;
  /** @minLength 1 */
  password: string;
}

export interface LogoutRequest {
  /** @minLength 1 */
  token: string;
}

export interface PasswordResetDto {
  /**
   * @minLength 6
   * @maxLength 2147483647
   */
  newPassword: string;
  /** @minLength 1 */
  token: string;
}

export type UserAuthResponseDtoRole = typeof UserAuthResponseDtoRole[keyof typeof UserAuthResponseDtoRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserAuthResponseDtoRole = {
  USER: 'USER',
  ORGANIZER: 'ORGANIZER',
  ADMIN: 'ADMIN',
} as const;

export interface UserAuthResponseDto {
  email: string;
  fullName: string;
  id: string;
  profilePictureUrl?: string;
  refreshToken?: string;
  role: UserAuthResponseDtoRole;
  token: string;
}

export interface ApiResponseUserAuthResponseDto {
  data?: UserAuthResponseDto;
  message?: string;
  success: boolean;
}

export interface RefreshTokenRequest {
  /** @minLength 1 */
  refreshToken: string;
}

export type UserCreateDtoRole = typeof UserCreateDtoRole[keyof typeof UserCreateDtoRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserCreateDtoRole = {
  USER: 'USER',
  ORGANIZER: 'ORGANIZER',
  ADMIN: 'ADMIN',
} as const;

export interface UserCreateDto {
  /** @minLength 1 */
  email: string;
  /** @minLength 1 */
  fullName: string;
  /**
   * @minLength 6
   * @maxLength 2147483647
   */
  password: string;
  /** @pattern ^\+?[0-9]{10,15}$ */
  phoneNumber?: string;
  role: UserCreateDtoRole;
}

export interface CommentReportRequest {
  reason: string;
}

export interface CommentRequest {
  content: string;
  eventId: string;
  parentId?: string;
}

export interface ApiResponseDeviceTokenResponse {
  data?: DeviceTokenResponse;
  message?: string;
  success: boolean;
}

export interface TopicSubscriptionRequest {
  /**
   * @minLength 1
   * @pattern ^[a-zA-Z0-9-_.~%]{1,900}$
   */
  topic: string;
}

export interface CloudinaryImageRequest {
  height: number;
  isPrimary: boolean;
  /** @minLength 1 */
  publicId: string;
  /** @minLength 1 */
  secureUrl: string;
  width: number;
}

export interface ImageDto {
  createdAt?: string;
  eventId?: string;
  height?: number;
  id?: string;
  isPrimary: boolean;
  url: string;
  width?: number;
}

export interface ApiResponseImageDto {
  data?: ImageDto;
  message?: string;
  success: boolean;
}

export interface EventCreateDto {
  /** @minLength 1 */
  address: string;
  categoryId: string;
  /** @minLength 1 */
  city: string;
  /** @minLength 1 */
  description: string;
  endDate: string;
  isDraft: boolean;
  isFree: boolean;
  isPrivate: boolean;
  latitude: number;
  locationId: string;
  longitude: number;
  /** @minimum 1 */
  maxAttendees: number;
  /** @minLength 1 */
  shortDescription: string;
  startDate: string;
  /** @minLength 1 */
  title: string;
}

export type DeviceTokenResponseDeviceType = typeof DeviceTokenResponseDeviceType[keyof typeof DeviceTokenResponseDeviceType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeviceTokenResponseDeviceType = {
  ANDROID: 'ANDROID',
  IOS: 'IOS',
  WEB: 'WEB',
} as const;

export interface DeviceTokenResponse {
  createdAt: string;
  deviceType: DeviceTokenResponseDeviceType;
  id: string;
  isActive: boolean;
  token: string;
}

export type DeviceTokenRequestDeviceType = typeof DeviceTokenRequestDeviceType[keyof typeof DeviceTokenRequestDeviceType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeviceTokenRequestDeviceType = {
  ANDROID: 'ANDROID',
  IOS: 'IOS',
  WEB: 'WEB',
} as const;

export interface DeviceTokenRequest {
  deviceType: DeviceTokenRequestDeviceType;
  /** @minLength 1 */
  token: string;
}

export interface ApiResponseNotificationResponse {
  data?: NotificationResponse;
  message?: string;
  success: boolean;
}

/**
 * Lo·∫°i th√¥ng b√°o
 */
export type TestNotificationRequestNotificationType = typeof TestNotificationRequestNotificationType[keyof typeof TestNotificationRequestNotificationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TestNotificationRequestNotificationType = {
  ACCOUNT_ACTIVATION: 'ACCOUNT_ACTIVATION',
  PASSWORD_RESET: 'PASSWORD_RESET',
  TICKET_CONFIRMATION: 'TICKET_CONFIRMATION',
  EVENT_REMINDER: 'EVENT_REMINDER',
  NEW_COMMENT: 'NEW_COMMENT',
  NEW_RATING: 'NEW_RATING',
  TICKET_PURCHASE: 'TICKET_PURCHASE',
  SYSTEM: 'SYSTEM',
} as const;

export interface TestNotificationRequest {
  /** N·ªôi dung th√¥ng b√°o */
  content: string;
  /** Lo·∫°i th√¥ng b√°o */
  notificationType: TestNotificationRequestNotificationType;
  /** ID tham chi·∫øu (v√≠ d·ª•: ID s·ª± ki·ªán) */
  referenceId?: string;
  /** Lo·∫°i tham chi·∫øu */
  referenceType?: string;
  /** Ti√™u ƒë·ªÅ th√¥ng b√°o */
  title: string;
  /** ID c·ªßa ng∆∞·ªùi d√πng nh·∫≠n th√¥ng b√°o (ƒë·ªÉ tr·ªëng n·∫øu g·ª≠i cho ng∆∞·ªùi d√πng hi·ªán t·∫°i) */
  userId?: string;
}

export type PaymentCreateDtoMetadata = {[key: string]: string};

export interface PaymentCreateDto {
  amount: number;
  description?: string;
  metadata?: PaymentCreateDtoMetadata;
  paymentMethod: string;
  returnUrl: string;
  ticketId: string;
}

export type PaymentResponseDtoStatus = typeof PaymentResponseDtoStatus[keyof typeof PaymentResponseDtoStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentResponseDtoStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED',
  CANCELLED: 'CANCELLED',
  PROCESSING: 'PROCESSING',
} as const;

export type PaymentResponseDtoMetadata = {[key: string]: string};

export interface PaymentResponseDto {
  amount: number;
  createdAt: string;
  eventId: string;
  eventTitle: string;
  id: string;
  metadata?: PaymentResponseDtoMetadata;
  paymentMethod: string;
  paymentUrl?: string;
  refundedAmount?: number;
  refundedAt?: string;
  status: PaymentResponseDtoStatus;
  ticketId: string;
  ticketTypeName: string;
  transactionId?: string;
  updatedAt: string;
  userId: string;
  userName: string;
}

export interface ApiResponsePaymentResponseDto {
  data?: PaymentResponseDto;
  message?: string;
  success: boolean;
}

export type RefundRequestDtoMetadata = {[key: string]: string};

export interface RefundRequestDto {
  amount: number;
  metadata?: RefundRequestDtoMetadata;
  reason: string;
}

export interface RatingReportRequest {
  reason: string;
}

export interface RatingRequest {
  eventId: string;
  review?: string;
  score: number;
}

export type UserSummaryDtoRole = typeof UserSummaryDtoRole[keyof typeof UserSummaryDtoRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserSummaryDtoRole = {
  USER: 'USER',
  ORGANIZER: 'ORGANIZER',
  ADMIN: 'ADMIN',
} as const;

export interface UserSummaryDto {
  email: string;
  fullName: string;
  id: string;
  profileImageUrl?: string;
  role: UserSummaryDtoRole;
}

export type ReportDtoParameters = {[key: string]: unknown};

export interface EventSummaryDto {
  coverImageUrl?: string;
  description?: string;
  endDate: string;
  id: number;
  location?: string;
  organizerId: string;
  organizerName?: string;
  startDate: string;
  ticketsAvailable?: number;
  ticketsSold?: number;
  title: string;
}

export interface ReportDto {
  dateGenerated: string;
  description?: string;
  event?: EventSummaryDto;
  filePath?: string;
  generatedBy: UserSummaryDto;
  id?: number;
  name: string;
  parameters?: ReportDtoParameters;
  resultData?: unknown;
  type: string;
}

export type ReportRequestParameters = {[key: string]: unknown};

export interface ReportRequest {
  description?: string;
  eventId?: string;
  name: string;
  parameters?: ReportRequestParameters;
  type: string;
}

export interface ApiResponseBoolean {
  data?: boolean;
  message?: string;
  success: boolean;
}

export type NotificationTestRequestData = {[key: string]: string};

export interface NotificationTestRequest {
  body?: string;
  data?: NotificationTestRequestData;
  title?: string;
}

export interface TicketCheckInRequestDto {
  eventId: string;
  ticketId?: string;
  ticketNumber?: string;
  userId?: string;
}

export type ApiResponseMapStringIntegerData = {[key: string]: number};

export interface ApiResponseMapStringInteger {
  data?: ApiResponseMapStringIntegerData;
  message?: string;
  success: boolean;
}

export interface TicketPurchaseResponseDto {
  buyerEmail: string;
  buyerName: string;
  buyerPhone?: string;
  discountAmount: number;
  eventId: string;
  eventTitle: string;
  orderId: string;
  paymentId?: string;
  paymentStatus: string;
  paymentUrl?: string;
  promoCode?: string;
  purchaseDate: string;
  tickets: TicketDto[];
  totalAmount: number;
}

export interface ApiResponseTicketPurchaseResponseDto {
  data?: TicketPurchaseResponseDto;
  message?: string;
  success: boolean;
}

export interface TicketItemDto {
  /** @minimum 1 */
  quantity: number;
  ticketTypeId: string;
}

export interface TicketPurchaseDto {
  /** @minLength 1 */
  buyerEmail: string;
  /**
   * @minLength 2
   * @maxLength 100
   */
  buyerName: string;
  /**
   * @minLength 0
   * @maxLength 20
   */
  buyerPhone?: string;
  eventId: string;
  /** @minLength 1 */
  paymentMethod: string;
  promoCode?: string;
  /** @minItems 1 */
  tickets: TicketItemDto[];
}

export type TicketDtoStatus = typeof TicketDtoStatus[keyof typeof TicketDtoStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TicketDtoStatus = {
  RESERVED: 'RESERVED',
  PAID: 'PAID',
  CHECKED_IN: 'CHECKED_IN',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED',
} as const;

export interface TicketDto {
  cancelledAt?: string;
  checkedInAt?: string;
  eventAddress: string;
  eventEndDate: string;
  eventId: string;
  eventImageUrl?: string;
  eventLocation: string;
  eventStartDate: string;
  eventTitle: string;
  id?: string;
  paymentId?: string;
  paymentStatus?: string;
  price: number;
  purchaseDate?: string;
  qrCodeUrl?: string;
  status: TicketDtoStatus;
  ticketNumber?: string;
  ticketTypeId: string;
  ticketTypeName: string;
  userId: string;
  userName: string;
}

export interface ApiResponseTicketDto {
  data?: TicketDto;
  message?: string;
  success: boolean;
}

export interface PasswordChangeDto {
  /** @minLength 1 */
  confirmPassword: string;
  /** @minLength 1 */
  currentPassword: string;
  /**
   * @minLength 6
   * @maxLength 2147483647
   */
  newPassword: string;
}

export interface ApiResponseString {
  data?: string;
  message?: string;
  success: boolean;
}

export interface AdminUserCreateDto {
  /** @minLength 1 */
  email: string;
  enabled: boolean;
  /** @minLength 1 */
  fullName: string;
  /**
   * @minLength 6
   * @maxLength 2147483647
   */
  password: string;
  /** @pattern ^\+?[0-9]{10,15}$ */
  phoneNumber?: string;
  /** @minLength 1 */
  role: string;
}

export interface CategoryDto {
  createdAt?: string;
  /**
   * @minLength 0
   * @maxLength 255
   */
  description?: string;
  iconUrl?: string;
  id?: string;
  isActive: boolean;
  /**
   * @minLength 2
   * @maxLength 50
   */
  name: string;
  updatedAt?: string;
}

export interface ApiResponseCategoryDto {
  data?: CategoryDto;
  message?: string;
  success: boolean;
}

export type CommentStatusUpdateRequestStatus = typeof CommentStatusUpdateRequestStatus[keyof typeof CommentStatusUpdateRequestStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CommentStatusUpdateRequestStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  REPORTED: 'REPORTED',
} as const;

export interface CommentStatusUpdateRequest {
  status: CommentStatusUpdateRequestStatus;
}

export type CommentResponseStatus = typeof CommentResponseStatus[keyof typeof CommentResponseStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CommentResponseStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  REPORTED: 'REPORTED',
} as const;

export interface CommentResponse {
  content: string;
  createdAt: string;
  eventId: string;
  eventTitle: string;
  id?: string;
  parentId?: string;
  replies?: CommentDto[];
  replyCount: number;
  status: CommentResponseStatus;
  updatedAt: string;
  userAvatar?: string;
  userId: string;
  username: string;
}

export type CommentDtoStatus = typeof CommentDtoStatus[keyof typeof CommentDtoStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CommentDtoStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  REPORTED: 'REPORTED',
} as const;

export interface CommentDto {
  content: string;
  createdAt: string;
  eventId: string;
  id?: string;
  parentId?: string;
  replyCount: number;
  status: CommentDtoStatus;
  updatedAt: string;
  userAvatar?: string;
  userId: string;
  username: string;
}

export interface CommentUpdateRequest {
  content: string;
}

export interface EventCancelDto {
  /**
   * @minLength 10
   * @maxLength 1000
   */
  reason: string;
}

export type EventDtoStatus = typeof EventDtoStatus[keyof typeof EventDtoStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventDtoStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED',
} as const;

export interface EventDto {
  address: string;
  categoryId: string;
  categoryName: string;
  city: string;
  createdAt?: string;
  currentAttendees: number;
  description: string;
  endDate: string;
  featuredImageUrl?: string;
  id?: string;
  imageUrls?: string[];
  isFeatured: boolean;
  isFree: boolean;
  isPrivate: boolean;
  latitude: number;
  locationId: string;
  locationName: string;
  longitude: number;
  maxAttendees: number;
  maxTicketPrice?: number;
  minTicketPrice?: number;
  organizerId: string;
  organizerName: string;
  shortDescription: string;
  startDate: string;
  status: EventDtoStatus;
  ticketTypes?: TicketTypeDto[];
  title: string;
  updatedAt?: string;
}

export interface ApiResponseEventDto {
  data?: EventDto;
  message?: string;
  success: boolean;
}

export interface EventUpdateDto {
  address?: string;
  categoryId?: string;
  city?: string;
  description?: string;
  endDate?: string;
  isFree?: boolean;
  isPrivate?: boolean;
  latitude?: number;
  locationId?: string;
  longitude?: number;
  maxAttendees?: number;
  shortDescription?: string;
  startDate?: string;
  title?: string;
}

export interface LocationDto {
  /**
   * @minLength 0
   * @maxLength 255
   */
  address: string;
  capacity?: number;
  /**
   * @minLength 0
   * @maxLength 100
   */
  city: string;
  /**
   * @minLength 0
   * @maxLength 100
   */
  country: string;
  createdAt?: string;
  /**
   * @minLength 0
   * @maxLength 1000
   */
  description?: string;
  id?: string;
  latitude: number;
  longitude: number;
  /**
   * @minLength 2
   * @maxLength 100
   */
  name: string;
  /**
   * @minLength 0
   * @maxLength 20
   */
  phoneNumber?: string;
  /**
   * @minLength 0
   * @maxLength 20
   */
  postalCode?: string;
  /**
   * @minLength 0
   * @maxLength 100
   */
  state?: string;
  updatedAt?: string;
  /**
   * @minLength 0
   * @maxLength 255
   */
  website?: string;
}

export interface ApiResponseLocationDto {
  data?: LocationDto;
  message?: string;
  success: boolean;
}

export interface NotificationChannelPreference {
  accountNotifications: boolean;
  commentNotifications: boolean;
  enabled: boolean;
  eventReminders: boolean;
  marketingNotifications: boolean;
  ratingNotifications: boolean;
}

export interface NotificationPreferencesRequest {
  email: NotificationChannelPreference;
  push: NotificationChannelPreference;
}

export type NotificationResponseNotificationType = typeof NotificationResponseNotificationType[keyof typeof NotificationResponseNotificationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NotificationResponseNotificationType = {
  ACCOUNT_ACTIVATION: 'ACCOUNT_ACTIVATION',
  PASSWORD_RESET: 'PASSWORD_RESET',
  TICKET_CONFIRMATION: 'TICKET_CONFIRMATION',
  EVENT_REMINDER: 'EVENT_REMINDER',
  NEW_COMMENT: 'NEW_COMMENT',
  NEW_RATING: 'NEW_RATING',
  TICKET_PURCHASE: 'TICKET_PURCHASE',
  SYSTEM: 'SYSTEM',
} as const;

export interface NotificationResponse {
  content: string;
  createdAt: string;
  id: string;
  isRead: boolean;
  notificationType: NotificationResponseNotificationType;
  readAt?: string;
  referenceId?: string;
  referenceType?: string;
  title: string;
}

export type RatingStatusUpdateRequestStatus = typeof RatingStatusUpdateRequestStatus[keyof typeof RatingStatusUpdateRequestStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RatingStatusUpdateRequestStatus = {
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  HIDDEN: 'HIDDEN',
} as const;

export interface RatingStatusUpdateRequest {
  status: RatingStatusUpdateRequestStatus;
}

export type RatingResponseStatus = typeof RatingResponseStatus[keyof typeof RatingResponseStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RatingResponseStatus = {
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  HIDDEN: 'HIDDEN',
} as const;

export interface RatingResponse {
  createdAt: string;
  eventId: string;
  eventTitle: string;
  id?: string;
  isReported: boolean;
  review?: string;
  score: number;
  status: RatingResponseStatus;
  updatedAt: string;
  userAvatar?: string;
  userId: string;
  username: string;
}

export interface RatingUpdateRequest {
  review?: string;
  score: number;
}

export interface TicketTypeDto {
  availableQuantity?: number;
  createdAt?: string;
  /**
   * @minLength 0
   * @maxLength 500
   */
  description?: string;
  eventId: string;
  id?: string;
  isActive: boolean;
  isEarlyBird: boolean;
  isVIP: boolean;
  maxTicketsPerCustomer?: number;
  minTicketsPerOrder?: number;
  /**
   * @minLength 2
   * @maxLength 100
   */
  name: string;
  /** @minimum 0 */
  price: number;
  /** @minimum 1 */
  quantity: number;
  quantitySold: number;
  salesEndDate?: string;
  salesStartDate?: string;
  updatedAt?: string;
}

export interface ApiResponseTicketTypeDto {
  data?: TicketTypeDto;
  message?: string;
  success: boolean;
}

export type UserDtoRole = typeof UserDtoRole[keyof typeof UserDtoRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserDtoRole = {
  USER: 'USER',
  ORGANIZER: 'ORGANIZER',
  ADMIN: 'ADMIN',
} as const;

export interface UserDto {
  createdAt?: string;
  email: string;
  enabled: boolean;
  fullName: string;
  id?: string;
  phoneNumber?: string;
  profilePictureUrl?: string;
  role: UserDtoRole;
}

export interface PagedResponseUserDto {
  content: UserDto[];
  last: boolean;
  page: number;
  size: number;
  totalElements: number;
  totalPages: number;
}

export interface ApiResponseUserDto {
  data?: UserDto;
  message?: string;
  success: boolean;
}

export interface UserUpdateDto {
  enabled?: boolean;
  fullName?: string;
  phoneNumber?: string;
  profilePictureUrl?: string;
}





/**
 * @summary L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo ID (Admin only)
 */
export const getUserById = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponseUserDto>(
      {url: `/api/users/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserByIdQueryKey = (id: string,) => {
    return [`/api/users/${id}`] as const;
    }

    
export const getGetUserByIdQueryOptions = <TData = Awaited<ReturnType<typeof getUserById>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserById>>> = ({ signal }) => getUserById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUserByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUserById>>>
export type GetUserByIdQueryError = unknown

/**
 * @summary L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo ID (Admin only)
 */
export const useGetUserById = <TData = Awaited<ReturnType<typeof getUserById>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUserByIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng (Admin only)
 */
export const updateUser = (
    id: string,
    userUpdateDto: UserUpdateDto,
 ) => {
      
      
      return http<ApiResponseUserDto>(
      {url: `/api/users/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: userUpdateDto
    },
      );
    }
  


export const getUpdateUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUser>>, TError,{id: string;data: UserUpdateDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateUser>>, TError,{id: string;data: UserUpdateDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateUser>>, {id: string;data: UserUpdateDto}> = (props) => {
          const {id,data} = props ?? {};

          return  updateUser(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateUserMutationResult = NonNullable<Awaited<ReturnType<typeof updateUser>>>
    export type UpdateUserMutationBody = UserUpdateDto
    export type UpdateUserMutationError = unknown

    /**
 * @summary C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng (Admin only)
 */
export const useUpdateUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUser>>, TError,{id: string;data: UserUpdateDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateUser>>,
        TError,
        {id: string;data: UserUpdateDto},
        TContext
      > => {

      const mutationOptions = getUpdateUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary X√≥a ng∆∞·ªùi d√πng (Admin only)
 */
export const deleteUser = (
    id: string,
 ) => {
      
      
      return http<ApiResponseString>(
      {url: `/api/users/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUser>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteUser>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUser>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteUser(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteUserMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUser>>>
    
    export type DeleteUserMutationError = unknown

    /**
 * @summary X√≥a ng∆∞·ªùi d√πng (Admin only)
 */
export const useDeleteUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUser>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteUser>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
 */
export const getCurrentUser = (
    
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponseUserDto>(
      {url: `/api/users/me`, method: 'GET', signal
    },
      );
    }
  

export const getGetCurrentUserQueryKey = () => {
    return [`/api/users/me`] as const;
    }

    
export const getGetCurrentUserQueryOptions = <TData = Awaited<ReturnType<typeof getCurrentUser>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCurrentUserQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentUser>>> = ({ signal }) => getCurrentUser(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData> & { queryKey: QueryKey }
}

export type GetCurrentUserQueryResult = NonNullable<Awaited<ReturnType<typeof getCurrentUser>>>
export type GetCurrentUserQueryError = unknown

/**
 * @summary L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
 */
export const useGetCurrentUser = <TData = Awaited<ReturnType<typeof getCurrentUser>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetCurrentUserQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
 */
export const updateCurrentUser = (
    userUpdateDto: UserUpdateDto,
 ) => {
      
      
      return http<ApiResponseUserDto>(
      {url: `/api/users/me`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: userUpdateDto
    },
      );
    }
  


export const getUpdateCurrentUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCurrentUser>>, TError,{data: UserUpdateDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateCurrentUser>>, TError,{data: UserUpdateDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCurrentUser>>, {data: UserUpdateDto}> = (props) => {
          const {data} = props ?? {};

          return  updateCurrentUser(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCurrentUserMutationResult = NonNullable<Awaited<ReturnType<typeof updateCurrentUser>>>
    export type UpdateCurrentUserMutationBody = UserUpdateDto
    export type UpdateCurrentUserMutationError = unknown

    /**
 * @summary C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
 */
export const useUpdateCurrentUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCurrentUser>>, TError,{data: UserUpdateDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateCurrentUser>>,
        TError,
        {data: UserUpdateDto},
        TContext
      > => {

      const mutationOptions = getUpdateCurrentUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getTicketTypeById = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponseTicketTypeDto>(
      {url: `/api/ticket-types/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetTicketTypeByIdQueryKey = (id: string,) => {
    return [`/api/ticket-types/${id}`] as const;
    }

    
export const getGetTicketTypeByIdQueryOptions = <TData = Awaited<ReturnType<typeof getTicketTypeById>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTicketTypeById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTicketTypeByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTicketTypeById>>> = ({ signal }) => getTicketTypeById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTicketTypeById>>, TError, TData> & { queryKey: QueryKey }
}

export type GetTicketTypeByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTicketTypeById>>>
export type GetTicketTypeByIdQueryError = unknown

export const useGetTicketTypeById = <TData = Awaited<ReturnType<typeof getTicketTypeById>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTicketTypeById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTicketTypeByIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const updateTicketType = (
    id: string,
    ticketTypeDto: TicketTypeDto,
 ) => {
      
      
      return http<ApiResponseTicketTypeDto>(
      {url: `/api/ticket-types/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: ticketTypeDto
    },
      );
    }
  


export const getUpdateTicketTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTicketType>>, TError,{id: string;data: TicketTypeDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateTicketType>>, TError,{id: string;data: TicketTypeDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateTicketType>>, {id: string;data: TicketTypeDto}> = (props) => {
          const {id,data} = props ?? {};

          return  updateTicketType(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateTicketTypeMutationResult = NonNullable<Awaited<ReturnType<typeof updateTicketType>>>
    export type UpdateTicketTypeMutationBody = TicketTypeDto
    export type UpdateTicketTypeMutationError = unknown

    export const useUpdateTicketType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTicketType>>, TError,{id: string;data: TicketTypeDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateTicketType>>,
        TError,
        {id: string;data: TicketTypeDto},
        TContext
      > => {

      const mutationOptions = getUpdateTicketTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteTicketType = (
    id: string,
 ) => {
      
      
      return http<ApiResponseBoolean>(
      {url: `/api/ticket-types/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteTicketTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTicketType>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteTicketType>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTicketType>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteTicketType(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTicketTypeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTicketType>>>
    
    export type DeleteTicketTypeMutationError = unknown

    export const useDeleteTicketType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTicketType>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTicketType>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteTicketTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary L·∫•y ƒë√°nh gi√° theo ID
 */
export const getRatingById = (
    ratingId: string,
 signal?: AbortSignal
) => {
      
      
      return http<RatingResponse>(
      {url: `/api/ratings/${ratingId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetRatingByIdQueryKey = (ratingId: string,) => {
    return [`/api/ratings/${ratingId}`] as const;
    }

    
export const getGetRatingByIdQueryOptions = <TData = Awaited<ReturnType<typeof getRatingById>>, TError = unknown>(ratingId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRatingById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRatingByIdQueryKey(ratingId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRatingById>>> = ({ signal }) => getRatingById(ratingId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ratingId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRatingById>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRatingByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getRatingById>>>
export type GetRatingByIdQueryError = unknown

/**
 * @summary L·∫•y ƒë√°nh gi√° theo ID
 */
export const useGetRatingById = <TData = Awaited<ReturnType<typeof getRatingById>>, TError = unknown>(
 ratingId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRatingById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRatingByIdQueryOptions(ratingId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary C·∫≠p nh·∫≠t ƒë√°nh gi√°
 */
export const updateRating = (
    ratingId: string,
    ratingUpdateRequest: RatingUpdateRequest,
 ) => {
      
      
      return http<RatingResponse>(
      {url: `/api/ratings/${ratingId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: ratingUpdateRequest
    },
      );
    }
  


export const getUpdateRatingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateRating>>, TError,{ratingId: string;data: RatingUpdateRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateRating>>, TError,{ratingId: string;data: RatingUpdateRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateRating>>, {ratingId: string;data: RatingUpdateRequest}> = (props) => {
          const {ratingId,data} = props ?? {};

          return  updateRating(ratingId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateRatingMutationResult = NonNullable<Awaited<ReturnType<typeof updateRating>>>
    export type UpdateRatingMutationBody = RatingUpdateRequest
    export type UpdateRatingMutationError = unknown

    /**
 * @summary C·∫≠p nh·∫≠t ƒë√°nh gi√°
 */
export const useUpdateRating = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateRating>>, TError,{ratingId: string;data: RatingUpdateRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateRating>>,
        TError,
        {ratingId: string;data: RatingUpdateRequest},
        TContext
      > => {

      const mutationOptions = getUpdateRatingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary X√≥a ƒë√°nh gi√°
 */
export const deleteRating = (
    ratingId: string,
 ) => {
      
      
      return http<void>(
      {url: `/api/ratings/${ratingId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteRatingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRating>>, TError,{ratingId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteRating>>, TError,{ratingId: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteRating>>, {ratingId: string}> = (props) => {
          const {ratingId} = props ?? {};

          return  deleteRating(ratingId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteRatingMutationResult = NonNullable<Awaited<ReturnType<typeof deleteRating>>>
    
    export type DeleteRatingMutationError = unknown

    /**
 * @summary X√≥a ƒë√°nh gi√°
 */
export const useDeleteRating = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRating>>, TError,{ratingId: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteRating>>,
        TError,
        {ratingId: string},
        TContext
      > => {

      const mutationOptions = getDeleteRatingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√°nh gi√° (Admin/Organizer)
 */
export const updateRatingStatus = (
    ratingId: string,
    ratingStatusUpdateRequest: RatingStatusUpdateRequest,
 ) => {
      
      
      return http<RatingResponse>(
      {url: `/api/ratings/${ratingId}/status`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: ratingStatusUpdateRequest
    },
      );
    }
  


export const getUpdateRatingStatusMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateRatingStatus>>, TError,{ratingId: string;data: RatingStatusUpdateRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateRatingStatus>>, TError,{ratingId: string;data: RatingStatusUpdateRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateRatingStatus>>, {ratingId: string;data: RatingStatusUpdateRequest}> = (props) => {
          const {ratingId,data} = props ?? {};

          return  updateRatingStatus(ratingId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateRatingStatusMutationResult = NonNullable<Awaited<ReturnType<typeof updateRatingStatus>>>
    export type UpdateRatingStatusMutationBody = RatingStatusUpdateRequest
    export type UpdateRatingStatusMutationError = unknown

    /**
 * @summary C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√°nh gi√° (Admin/Organizer)
 */
export const useUpdateRatingStatus = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateRatingStatus>>, TError,{ratingId: string;data: RatingStatusUpdateRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateRatingStatus>>,
        TError,
        {ratingId: string;data: RatingStatusUpdateRequest},
        TContext
      > => {

      const mutationOptions = getUpdateRatingStatusMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary ƒê√°nh d·∫•u th√¥ng b√°o l√† ƒë√£ ƒë·ªçc
 */
export const markAsRead = (
    notificationId: string,
 ) => {
      
      
      return http<NotificationResponse>(
      {url: `/api/notifications/${notificationId}/read`, method: 'PUT'
    },
      );
    }
  


export const getMarkAsReadMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof markAsRead>>, TError,{notificationId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof markAsRead>>, TError,{notificationId: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof markAsRead>>, {notificationId: string}> = (props) => {
          const {notificationId} = props ?? {};

          return  markAsRead(notificationId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type MarkAsReadMutationResult = NonNullable<Awaited<ReturnType<typeof markAsRead>>>
    
    export type MarkAsReadMutationError = unknown

    /**
 * @summary ƒê√°nh d·∫•u th√¥ng b√°o l√† ƒë√£ ƒë·ªçc
 */
export const useMarkAsRead = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof markAsRead>>, TError,{notificationId: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof markAsRead>>,
        TError,
        {notificationId: string},
        TContext
      > => {

      const mutationOptions = getMarkAsReadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o l√† ƒë√£ ƒë·ªçc
 */
export const markAllAsRead = (
    
 ) => {
      
      
      return http<MarkAllAsRead200>(
      {url: `/api/notifications/read-all`, method: 'PUT'
    },
      );
    }
  


export const getMarkAllAsReadMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof markAllAsRead>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof markAllAsRead>>, TError,void, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof markAllAsRead>>, void> = () => {
          

          return  markAllAsRead()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type MarkAllAsReadMutationResult = NonNullable<Awaited<ReturnType<typeof markAllAsRead>>>
    
    export type MarkAllAsReadMutationError = unknown

    /**
 * @summary ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o l√† ƒë√£ ƒë·ªçc
 */
export const useMarkAllAsRead = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof markAllAsRead>>, TError,void, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof markAllAsRead>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getMarkAllAsReadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary L·∫•y c√†i ƒë·∫∑t th√¥ng b√°o
 */
export const getNotificationPreferences = (
    
 signal?: AbortSignal
) => {
      
      
      return http<NotificationPreferencesRequest>(
      {url: `/api/notifications/preferences`, method: 'GET', signal
    },
      );
    }
  

export const getGetNotificationPreferencesQueryKey = () => {
    return [`/api/notifications/preferences`] as const;
    }

    
export const getGetNotificationPreferencesQueryOptions = <TData = Awaited<ReturnType<typeof getNotificationPreferences>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationPreferences>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNotificationPreferencesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotificationPreferences>>> = ({ signal }) => getNotificationPreferences(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNotificationPreferences>>, TError, TData> & { queryKey: QueryKey }
}

export type GetNotificationPreferencesQueryResult = NonNullable<Awaited<ReturnType<typeof getNotificationPreferences>>>
export type GetNotificationPreferencesQueryError = unknown

/**
 * @summary L·∫•y c√†i ƒë·∫∑t th√¥ng b√°o
 */
export const useGetNotificationPreferences = <TData = Awaited<ReturnType<typeof getNotificationPreferences>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationPreferences>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetNotificationPreferencesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary C·∫≠p nh·∫≠t c√†i ƒë·∫∑t th√¥ng b√°o
 */
export const updateNotificationPreferences = (
    notificationPreferencesRequest: NotificationPreferencesRequest,
 ) => {
      
      
      return http<NotificationPreferencesRequest>(
      {url: `/api/notifications/preferences`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: notificationPreferencesRequest
    },
      );
    }
  


export const getUpdateNotificationPreferencesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateNotificationPreferences>>, TError,{data: NotificationPreferencesRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateNotificationPreferences>>, TError,{data: NotificationPreferencesRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateNotificationPreferences>>, {data: NotificationPreferencesRequest}> = (props) => {
          const {data} = props ?? {};

          return  updateNotificationPreferences(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateNotificationPreferencesMutationResult = NonNullable<Awaited<ReturnType<typeof updateNotificationPreferences>>>
    export type UpdateNotificationPreferencesMutationBody = NotificationPreferencesRequest
    export type UpdateNotificationPreferencesMutationError = unknown

    /**
 * @summary C·∫≠p nh·∫≠t c√†i ƒë·∫∑t th√¥ng b√°o
 */
export const useUpdateNotificationPreferences = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateNotificationPreferences>>, TError,{data: NotificationPreferencesRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateNotificationPreferences>>,
        TError,
        {data: NotificationPreferencesRequest},
        TContext
      > => {

      const mutationOptions = getUpdateNotificationPreferencesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getLocationById = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponseLocationDto>(
      {url: `/api/locations/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetLocationByIdQueryKey = (id: string,) => {
    return [`/api/locations/${id}`] as const;
    }

    
export const getGetLocationByIdQueryOptions = <TData = Awaited<ReturnType<typeof getLocationById>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLocationById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLocationByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocationById>>> = ({ signal }) => getLocationById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLocationById>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLocationByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getLocationById>>>
export type GetLocationByIdQueryError = unknown

export const useGetLocationById = <TData = Awaited<ReturnType<typeof getLocationById>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLocationById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetLocationByIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const updateLocation = (
    id: string,
    locationDto: LocationDto,
 ) => {
      
      
      return http<ApiResponseLocationDto>(
      {url: `/api/locations/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: locationDto
    },
      );
    }
  


export const getUpdateLocationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateLocation>>, TError,{id: string;data: LocationDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateLocation>>, TError,{id: string;data: LocationDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateLocation>>, {id: string;data: LocationDto}> = (props) => {
          const {id,data} = props ?? {};

          return  updateLocation(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateLocationMutationResult = NonNullable<Awaited<ReturnType<typeof updateLocation>>>
    export type UpdateLocationMutationBody = LocationDto
    export type UpdateLocationMutationError = unknown

    export const useUpdateLocation = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateLocation>>, TError,{id: string;data: LocationDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateLocation>>,
        TError,
        {id: string;data: LocationDto},
        TContext
      > => {

      const mutationOptions = getUpdateLocationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteLocation = (
    id: string,
 ) => {
      
      
      return http<ApiResponseBoolean>(
      {url: `/api/locations/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteLocationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLocation>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteLocation>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteLocation>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteLocation(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteLocationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteLocation>>>
    
    export type DeleteLocationMutationError = unknown

    export const useDeleteLocation = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLocation>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteLocation>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteLocationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getEventById = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponseEventDto>(
      {url: `/api/events/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetEventByIdQueryKey = (id: string,) => {
    return [`/api/events/${id}`] as const;
    }

    
export const getGetEventByIdQueryOptions = <TData = Awaited<ReturnType<typeof getEventById>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEventByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEventById>>> = ({ signal }) => getEventById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEventById>>, TError, TData> & { queryKey: QueryKey }
}

export type GetEventByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEventById>>>
export type GetEventByIdQueryError = unknown

export const useGetEventById = <TData = Awaited<ReturnType<typeof getEventById>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetEventByIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const updateEvent = (
    id: string,
    eventUpdateDto: EventUpdateDto,
 ) => {
      
      
      return http<ApiResponseEventDto>(
      {url: `/api/events/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: eventUpdateDto
    },
      );
    }
  


export const getUpdateEventMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateEvent>>, TError,{id: string;data: EventUpdateDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateEvent>>, TError,{id: string;data: EventUpdateDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateEvent>>, {id: string;data: EventUpdateDto}> = (props) => {
          const {id,data} = props ?? {};

          return  updateEvent(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateEventMutationResult = NonNullable<Awaited<ReturnType<typeof updateEvent>>>
    export type UpdateEventMutationBody = EventUpdateDto
    export type UpdateEventMutationError = unknown

    export const useUpdateEvent = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateEvent>>, TError,{id: string;data: EventUpdateDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateEvent>>,
        TError,
        {id: string;data: EventUpdateDto},
        TContext
      > => {

      const mutationOptions = getUpdateEventMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteEvent = (
    id: string,
 ) => {
      
      
      return http<ApiResponseBoolean>(
      {url: `/api/events/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteEventMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEvent>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteEvent>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEvent>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteEvent(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEventMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEvent>>>
    
    export type DeleteEventMutationError = unknown

    export const useDeleteEvent = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEvent>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEvent>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteEventMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const publishEvent = (
    id: string,
 ) => {
      
      
      return http<ApiResponseEventDto>(
      {url: `/api/events/${id}/publish`, method: 'PUT'
    },
      );
    }
  


export const getPublishEventMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof publishEvent>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof publishEvent>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof publishEvent>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  publishEvent(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PublishEventMutationResult = NonNullable<Awaited<ReturnType<typeof publishEvent>>>
    
    export type PublishEventMutationError = unknown

    export const usePublishEvent = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof publishEvent>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof publishEvent>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getPublishEventMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const cancelEvent = (
    id: string,
    eventCancelDto: EventCancelDto,
 ) => {
      
      
      return http<ApiResponseEventDto>(
      {url: `/api/events/${id}/cancel`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: eventCancelDto
    },
      );
    }
  


export const getCancelEventMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cancelEvent>>, TError,{id: string;data: EventCancelDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof cancelEvent>>, TError,{id: string;data: EventCancelDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof cancelEvent>>, {id: string;data: EventCancelDto}> = (props) => {
          const {id,data} = props ?? {};

          return  cancelEvent(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CancelEventMutationResult = NonNullable<Awaited<ReturnType<typeof cancelEvent>>>
    export type CancelEventMutationBody = EventCancelDto
    export type CancelEventMutationError = unknown

    export const useCancelEvent = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cancelEvent>>, TError,{id: string;data: EventCancelDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof cancelEvent>>,
        TError,
        {id: string;data: EventCancelDto},
        TContext
      > => {

      const mutationOptions = getCancelEventMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary L·∫•y b√¨nh lu·∫≠n theo ID
 */
export const getCommentById = (
    commentId: string,
 signal?: AbortSignal
) => {
      
      
      return http<CommentResponse>(
      {url: `/api/comments/${commentId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetCommentByIdQueryKey = (commentId: string,) => {
    return [`/api/comments/${commentId}`] as const;
    }

    
export const getGetCommentByIdQueryOptions = <TData = Awaited<ReturnType<typeof getCommentById>>, TError = unknown>(commentId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommentById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCommentByIdQueryKey(commentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommentById>>> = ({ signal }) => getCommentById(commentId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(commentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCommentById>>, TError, TData> & { queryKey: QueryKey }
}

export type GetCommentByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getCommentById>>>
export type GetCommentByIdQueryError = unknown

/**
 * @summary L·∫•y b√¨nh lu·∫≠n theo ID
 */
export const useGetCommentById = <TData = Awaited<ReturnType<typeof getCommentById>>, TError = unknown>(
 commentId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommentById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetCommentByIdQueryOptions(commentId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary C·∫≠p nh·∫≠t b√¨nh lu·∫≠n
 */
export const updateComment = (
    commentId: string,
    commentUpdateRequest: CommentUpdateRequest,
 ) => {
      
      
      return http<CommentResponse>(
      {url: `/api/comments/${commentId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: commentUpdateRequest
    },
      );
    }
  


export const getUpdateCommentMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateComment>>, TError,{commentId: string;data: CommentUpdateRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateComment>>, TError,{commentId: string;data: CommentUpdateRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateComment>>, {commentId: string;data: CommentUpdateRequest}> = (props) => {
          const {commentId,data} = props ?? {};

          return  updateComment(commentId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCommentMutationResult = NonNullable<Awaited<ReturnType<typeof updateComment>>>
    export type UpdateCommentMutationBody = CommentUpdateRequest
    export type UpdateCommentMutationError = unknown

    /**
 * @summary C·∫≠p nh·∫≠t b√¨nh lu·∫≠n
 */
export const useUpdateComment = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateComment>>, TError,{commentId: string;data: CommentUpdateRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateComment>>,
        TError,
        {commentId: string;data: CommentUpdateRequest},
        TContext
      > => {

      const mutationOptions = getUpdateCommentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary X√≥a b√¨nh lu·∫≠n
 */
export const deleteComment = (
    commentId: string,
 ) => {
      
      
      return http<void>(
      {url: `/api/comments/${commentId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteCommentMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteComment>>, TError,{commentId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteComment>>, TError,{commentId: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteComment>>, {commentId: string}> = (props) => {
          const {commentId} = props ?? {};

          return  deleteComment(commentId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCommentMutationResult = NonNullable<Awaited<ReturnType<typeof deleteComment>>>
    
    export type DeleteCommentMutationError = unknown

    /**
 * @summary X√≥a b√¨nh lu·∫≠n
 */
export const useDeleteComment = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteComment>>, TError,{commentId: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteComment>>,
        TError,
        {commentId: string},
        TContext
      > => {

      const mutationOptions = getDeleteCommentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary C·∫≠p nh·∫≠t tr·∫°ng th√°i b√¨nh lu·∫≠n (Admin/Organizer)
 */
export const updateCommentStatus = (
    commentId: string,
    commentStatusUpdateRequest: CommentStatusUpdateRequest,
 ) => {
      
      
      return http<CommentResponse>(
      {url: `/api/comments/${commentId}/status`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: commentStatusUpdateRequest
    },
      );
    }
  


export const getUpdateCommentStatusMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCommentStatus>>, TError,{commentId: string;data: CommentStatusUpdateRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateCommentStatus>>, TError,{commentId: string;data: CommentStatusUpdateRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCommentStatus>>, {commentId: string;data: CommentStatusUpdateRequest}> = (props) => {
          const {commentId,data} = props ?? {};

          return  updateCommentStatus(commentId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCommentStatusMutationResult = NonNullable<Awaited<ReturnType<typeof updateCommentStatus>>>
    export type UpdateCommentStatusMutationBody = CommentStatusUpdateRequest
    export type UpdateCommentStatusMutationError = unknown

    /**
 * @summary C·∫≠p nh·∫≠t tr·∫°ng th√°i b√¨nh lu·∫≠n (Admin/Organizer)
 */
export const useUpdateCommentStatus = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCommentStatus>>, TError,{commentId: string;data: CommentStatusUpdateRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateCommentStatus>>,
        TError,
        {commentId: string;data: CommentStatusUpdateRequest},
        TContext
      > => {

      const mutationOptions = getUpdateCommentStatusMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getCategoryById = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponseCategoryDto>(
      {url: `/api/categories/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetCategoryByIdQueryKey = (id: string,) => {
    return [`/api/categories/${id}`] as const;
    }

    
export const getGetCategoryByIdQueryOptions = <TData = Awaited<ReturnType<typeof getCategoryById>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCategoryByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategoryById>>> = ({ signal }) => getCategoryById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCategoryById>>, TError, TData> & { queryKey: QueryKey }
}

export type GetCategoryByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getCategoryById>>>
export type GetCategoryByIdQueryError = unknown

export const useGetCategoryById = <TData = Awaited<ReturnType<typeof getCategoryById>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetCategoryByIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const updateCategory = (
    id: string,
    categoryDto: CategoryDto,
 ) => {
      
      
      return http<ApiResponseCategoryDto>(
      {url: `/api/categories/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: categoryDto
    },
      );
    }
  


export const getUpdateCategoryMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCategory>>, TError,{id: string;data: CategoryDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateCategory>>, TError,{id: string;data: CategoryDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCategory>>, {id: string;data: CategoryDto}> = (props) => {
          const {id,data} = props ?? {};

          return  updateCategory(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof updateCategory>>>
    export type UpdateCategoryMutationBody = CategoryDto
    export type UpdateCategoryMutationError = unknown

    export const useUpdateCategory = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCategory>>, TError,{id: string;data: CategoryDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateCategory>>,
        TError,
        {id: string;data: CategoryDto},
        TContext
      > => {

      const mutationOptions = getUpdateCategoryMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteCategory = (
    id: string,
 ) => {
      
      
      return http<ApiResponseBoolean>(
      {url: `/api/categories/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteCategoryMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCategory>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteCategory>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCategory>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteCategory(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCategory>>>
    
    export type DeleteCategoryMutationError = unknown

    export const useDeleteCategory = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCategory>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteCategory>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteCategoryMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deactivateCategory = (
    id: string,
 ) => {
      
      
      return http<ApiResponseCategoryDto>(
      {url: `/api/categories/${id}/deactivate`, method: 'PUT'
    },
      );
    }
  


export const getDeactivateCategoryMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deactivateCategory>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deactivateCategory>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deactivateCategory>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deactivateCategory(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeactivateCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof deactivateCategory>>>
    
    export type DeactivateCategoryMutationError = unknown

    export const useDeactivateCategory = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deactivateCategory>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deactivateCategory>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeactivateCategoryMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const activateCategory = (
    id: string,
 ) => {
      
      
      return http<ApiResponseCategoryDto>(
      {url: `/api/categories/${id}/activate`, method: 'PUT'
    },
      );
    }
  


export const getActivateCategoryMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof activateCategory>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof activateCategory>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof activateCategory>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  activateCategory(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ActivateCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof activateCategory>>>
    
    export type ActivateCategoryMutationError = unknown

    export const useActivateCategory = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof activateCategory>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof activateCategory>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getActivateCategoryMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary L·∫•y danh s√°ch ng∆∞·ªùi d√πng (Admin only)
 */
export const getAllUsers = (
    params?: GetAllUsersParams,
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponsePagedResponseUserDto>(
      {url: `/api/users`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAllUsersQueryKey = (params?: GetAllUsersParams,) => {
    return [`/api/users`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllUsersQueryOptions = <TData = Awaited<ReturnType<typeof getAllUsers>>, TError = unknown>(params?: GetAllUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllUsersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllUsers>>> = ({ signal }) => getAllUsers(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAllUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getAllUsers>>>
export type GetAllUsersQueryError = unknown

/**
 * @summary L·∫•y danh s√°ch ng∆∞·ªùi d√πng (Admin only)
 */
export const useGetAllUsers = <TData = Awaited<ReturnType<typeof getAllUsers>>, TError = unknown>(
 params?: GetAllUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAllUsersQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary T·∫°o ng∆∞·ªùi d√πng m·ªõi v·ªõi role t√πy ch·ªçn (Admin only)
 */
export const createUser = (
    adminUserCreateDto: AdminUserCreateDto,
 ) => {
      
      
      return http<ApiResponseUserDto>(
      {url: `/api/users`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: adminUserCreateDto
    },
      );
    }
  


export const getCreateUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError,{data: AdminUserCreateDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError,{data: AdminUserCreateDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUser>>, {data: AdminUserCreateDto}> = (props) => {
          const {data} = props ?? {};

          return  createUser(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof createUser>>>
    export type CreateUserMutationBody = AdminUserCreateDto
    export type CreateUserMutationError = unknown

    /**
 * @summary T·∫°o ng∆∞·ªùi d√πng m·ªõi v·ªõi role t√πy ch·ªçn (Admin only)
 */
export const useCreateUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError,{data: AdminUserCreateDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createUser>>,
        TError,
        {data: AdminUserCreateDto},
        TContext
      > => {

      const mutationOptions = getCreateUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary C·∫≠p nh·∫≠t vai tr√≤ ng∆∞·ªùi d√πng (Admin only)
 */
export const updateUserRole = (
    id: string,
    params: UpdateUserRoleParams,
 ) => {
      
      
      return http<ApiResponseUserDto>(
      {url: `/api/users/${id}/role`, method: 'POST',
        params
    },
      );
    }
  


export const getUpdateUserRoleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUserRole>>, TError,{id: string;params: UpdateUserRoleParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateUserRole>>, TError,{id: string;params: UpdateUserRoleParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateUserRole>>, {id: string;params: UpdateUserRoleParams}> = (props) => {
          const {id,params} = props ?? {};

          return  updateUserRole(id,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateUserRoleMutationResult = NonNullable<Awaited<ReturnType<typeof updateUserRole>>>
    
    export type UpdateUserRoleMutationError = unknown

    /**
 * @summary C·∫≠p nh·∫≠t vai tr√≤ ng∆∞·ªùi d√πng (Admin only)
 */
export const useUpdateUserRole = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUserRole>>, TError,{id: string;params: UpdateUserRoleParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateUserRole>>,
        TError,
        {id: string;params: UpdateUserRoleParams},
        TContext
      > => {

      const mutationOptions = getUpdateUserRoleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary V√¥ hi·ªáu h√≥a t√†i kho·∫£n ng∆∞·ªùi d√πng (Admin only)
 */
export const deactivateUser = (
    id: string,
 ) => {
      
      
      return http<ApiResponseString>(
      {url: `/api/users/${id}/deactivate`, method: 'POST'
    },
      );
    }
  


export const getDeactivateUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deactivateUser>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deactivateUser>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deactivateUser>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deactivateUser(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeactivateUserMutationResult = NonNullable<Awaited<ReturnType<typeof deactivateUser>>>
    
    export type DeactivateUserMutationError = unknown

    /**
 * @summary V√¥ hi·ªáu h√≥a t√†i kho·∫£n ng∆∞·ªùi d√πng (Admin only)
 */
export const useDeactivateUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deactivateUser>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deactivateUser>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeactivateUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary K√≠ch ho·∫°t t√†i kho·∫£n ng∆∞·ªùi d√πng (Admin only)
 */
export const activateUser = (
    id: string,
 ) => {
      
      
      return http<ApiResponseUserDto>(
      {url: `/api/users/${id}/activate`, method: 'POST'
    },
      );
    }
  


export const getActivateUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof activateUser>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof activateUser>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof activateUser>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  activateUser(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ActivateUserMutationResult = NonNullable<Awaited<ReturnType<typeof activateUser>>>
    
    export type ActivateUserMutationError = unknown

    /**
 * @summary K√≠ch ho·∫°t t√†i kho·∫£n ng∆∞·ªùi d√πng (Admin only)
 */
export const useActivateUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof activateUser>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof activateUser>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getActivateUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary ƒê·ªïi m·∫≠t kh·∫©u ng∆∞·ªùi d√πng hi·ªán t·∫°i
 */
export const changePassword = (
    passwordChangeDto: PasswordChangeDto,
 ) => {
      
      
      return http<ApiResponseString>(
      {url: `/api/users/me/password`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: passwordChangeDto
    },
      );
    }
  


export const getChangePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changePassword>>, TError,{data: PasswordChangeDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof changePassword>>, TError,{data: PasswordChangeDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof changePassword>>, {data: PasswordChangeDto}> = (props) => {
          const {data} = props ?? {};

          return  changePassword(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof changePassword>>>
    export type ChangePasswordMutationBody = PasswordChangeDto
    export type ChangePasswordMutationError = unknown

    /**
 * @summary ƒê·ªïi m·∫≠t kh·∫©u ng∆∞·ªùi d√πng hi·ªán t·∫°i
 */
export const useChangePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changePassword>>, TError,{data: PasswordChangeDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof changePassword>>,
        TError,
        {data: PasswordChangeDto},
        TContext
      > => {

      const mutationOptions = getChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const cancelTicket = (
    ticketId: string,
 ) => {
      
      
      return http<ApiResponseTicketDto>(
      {url: `/api/tickets/${ticketId}/cancel`, method: 'POST'
    },
      );
    }
  


export const getCancelTicketMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cancelTicket>>, TError,{ticketId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof cancelTicket>>, TError,{ticketId: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof cancelTicket>>, {ticketId: string}> = (props) => {
          const {ticketId} = props ?? {};

          return  cancelTicket(ticketId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CancelTicketMutationResult = NonNullable<Awaited<ReturnType<typeof cancelTicket>>>
    
    export type CancelTicketMutationError = unknown

    export const useCancelTicket = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cancelTicket>>, TError,{ticketId: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof cancelTicket>>,
        TError,
        {ticketId: string},
        TContext
      > => {

      const mutationOptions = getCancelTicketMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const purchaseTickets = (
    ticketPurchaseDto: TicketPurchaseDto,
 ) => {
      
      
      return http<ApiResponseTicketPurchaseResponseDto>(
      {url: `/api/tickets/purchase`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: ticketPurchaseDto
    },
      );
    }
  


export const getPurchaseTicketsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof purchaseTickets>>, TError,{data: TicketPurchaseDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof purchaseTickets>>, TError,{data: TicketPurchaseDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof purchaseTickets>>, {data: TicketPurchaseDto}> = (props) => {
          const {data} = props ?? {};

          return  purchaseTickets(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PurchaseTicketsMutationResult = NonNullable<Awaited<ReturnType<typeof purchaseTickets>>>
    export type PurchaseTicketsMutationBody = TicketPurchaseDto
    export type PurchaseTicketsMutationError = unknown

    export const usePurchaseTickets = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof purchaseTickets>>, TError,{data: TicketPurchaseDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof purchaseTickets>>,
        TError,
        {data: TicketPurchaseDto},
        TContext
      > => {

      const mutationOptions = getPurchaseTicketsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const processExpiredReservations = (
    
 ) => {
      
      
      return http<ApiResponseMapStringInteger>(
      {url: `/api/tickets/process-expired`, method: 'POST'
    },
      );
    }
  


export const getProcessExpiredReservationsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof processExpiredReservations>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof processExpiredReservations>>, TError,void, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof processExpiredReservations>>, void> = () => {
          

          return  processExpiredReservations()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProcessExpiredReservationsMutationResult = NonNullable<Awaited<ReturnType<typeof processExpiredReservations>>>
    
    export type ProcessExpiredReservationsMutationError = unknown

    export const useProcessExpiredReservations = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof processExpiredReservations>>, TError,void, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof processExpiredReservations>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getProcessExpiredReservationsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const updatePaymentStatus = (
    params: UpdatePaymentStatusParams,
 ) => {
      
      
      return http<ApiResponseTicketPurchaseResponseDto>(
      {url: `/api/tickets/payment-webhook`, method: 'POST',
        params
    },
      );
    }
  


export const getUpdatePaymentStatusMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePaymentStatus>>, TError,{params: UpdatePaymentStatusParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updatePaymentStatus>>, TError,{params: UpdatePaymentStatusParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePaymentStatus>>, {params: UpdatePaymentStatusParams}> = (props) => {
          const {params} = props ?? {};

          return  updatePaymentStatus(params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdatePaymentStatusMutationResult = NonNullable<Awaited<ReturnType<typeof updatePaymentStatus>>>
    
    export type UpdatePaymentStatusMutationError = unknown

    export const useUpdatePaymentStatus = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePaymentStatus>>, TError,{params: UpdatePaymentStatusParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updatePaymentStatus>>,
        TError,
        {params: UpdatePaymentStatusParams},
        TContext
      > => {

      const mutationOptions = getUpdatePaymentStatusMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const checkInTicketWithRequest = (
    ticketCheckInRequestDto: TicketCheckInRequestDto,
 ) => {
      
      
      return http<ApiResponseTicketDto>(
      {url: `/api/tickets/check-in`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: ticketCheckInRequestDto
    },
      );
    }
  


export const getCheckInTicketWithRequestMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof checkInTicketWithRequest>>, TError,{data: TicketCheckInRequestDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof checkInTicketWithRequest>>, TError,{data: TicketCheckInRequestDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof checkInTicketWithRequest>>, {data: TicketCheckInRequestDto}> = (props) => {
          const {data} = props ?? {};

          return  checkInTicketWithRequest(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CheckInTicketWithRequestMutationResult = NonNullable<Awaited<ReturnType<typeof checkInTicketWithRequest>>>
    export type CheckInTicketWithRequestMutationBody = TicketCheckInRequestDto
    export type CheckInTicketWithRequestMutationError = unknown

    export const useCheckInTicketWithRequest = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof checkInTicketWithRequest>>, TError,{data: TicketCheckInRequestDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof checkInTicketWithRequest>>,
        TError,
        {data: TicketCheckInRequestDto},
        TContext
      > => {

      const mutationOptions = getCheckInTicketWithRequestMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary G·ª≠i th√¥ng b√°o ƒë·∫©y th·ª≠ nghi·ªám ƒë·∫øn thi·∫øt b·ªã c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
 */
export const sendTestNotification = (
    notificationTestRequest: NotificationTestRequest,
 ) => {
      
      
      return http<ApiResponseBoolean>(
      {url: `/api/test/notification`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: notificationTestRequest
    },
      );
    }
  


export const getSendTestNotificationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendTestNotification>>, TError,{data: NotificationTestRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof sendTestNotification>>, TError,{data: NotificationTestRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sendTestNotification>>, {data: NotificationTestRequest}> = (props) => {
          const {data} = props ?? {};

          return  sendTestNotification(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SendTestNotificationMutationResult = NonNullable<Awaited<ReturnType<typeof sendTestNotification>>>
    export type SendTestNotificationMutationBody = NotificationTestRequest
    export type SendTestNotificationMutationError = unknown

    /**
 * @summary G·ª≠i th√¥ng b√°o ƒë·∫©y th·ª≠ nghi·ªám ƒë·∫øn thi·∫øt b·ªã c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
 */
export const useSendTestNotification = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendTestNotification>>, TError,{data: NotificationTestRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof sendTestNotification>>,
        TError,
        {data: NotificationTestRequest},
        TContext
      > => {

      const mutationOptions = getSendTestNotificationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const generateSalesReport = (
    reportRequest: ReportRequest,
 ) => {
      
      
      return http<ReportDto>(
      {url: `/api/reports/sales`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: reportRequest
    },
      );
    }
  


export const getGenerateSalesReportMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof generateSalesReport>>, TError,{data: ReportRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof generateSalesReport>>, TError,{data: ReportRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof generateSalesReport>>, {data: ReportRequest}> = (props) => {
          const {data} = props ?? {};

          return  generateSalesReport(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GenerateSalesReportMutationResult = NonNullable<Awaited<ReturnType<typeof generateSalesReport>>>
    export type GenerateSalesReportMutationBody = ReportRequest
    export type GenerateSalesReportMutationError = unknown

    export const useGenerateSalesReport = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof generateSalesReport>>, TError,{data: ReportRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof generateSalesReport>>,
        TError,
        {data: ReportRequest},
        TContext
      > => {

      const mutationOptions = getGenerateSalesReportMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const generateRevenueReport = (
    reportRequest: ReportRequest,
 ) => {
      
      
      return http<ReportDto>(
      {url: `/api/reports/revenue`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: reportRequest
    },
      );
    }
  


export const getGenerateRevenueReportMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof generateRevenueReport>>, TError,{data: ReportRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof generateRevenueReport>>, TError,{data: ReportRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof generateRevenueReport>>, {data: ReportRequest}> = (props) => {
          const {data} = props ?? {};

          return  generateRevenueReport(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GenerateRevenueReportMutationResult = NonNullable<Awaited<ReturnType<typeof generateRevenueReport>>>
    export type GenerateRevenueReportMutationBody = ReportRequest
    export type GenerateRevenueReportMutationError = unknown

    export const useGenerateRevenueReport = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof generateRevenueReport>>, TError,{data: ReportRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof generateRevenueReport>>,
        TError,
        {data: ReportRequest},
        TContext
      > => {

      const mutationOptions = getGenerateRevenueReportMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const generateAttendanceReport = (
    reportRequest: ReportRequest,
 ) => {
      
      
      return http<ReportDto>(
      {url: `/api/reports/attendance`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: reportRequest
    },
      );
    }
  


export const getGenerateAttendanceReportMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof generateAttendanceReport>>, TError,{data: ReportRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof generateAttendanceReport>>, TError,{data: ReportRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof generateAttendanceReport>>, {data: ReportRequest}> = (props) => {
          const {data} = props ?? {};

          return  generateAttendanceReport(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GenerateAttendanceReportMutationResult = NonNullable<Awaited<ReturnType<typeof generateAttendanceReport>>>
    export type GenerateAttendanceReportMutationBody = ReportRequest
    export type GenerateAttendanceReportMutationError = unknown

    export const useGenerateAttendanceReport = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof generateAttendanceReport>>, TError,{data: ReportRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof generateAttendanceReport>>,
        TError,
        {data: ReportRequest},
        TContext
      > => {

      const mutationOptions = getGenerateAttendanceReportMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary T·∫°o ho·∫∑c c·∫≠p nh·∫≠t ƒë√°nh gi√°
 */
export const createOrUpdateRating = (
    ratingRequest: RatingRequest,
 ) => {
      
      
      return http<RatingResponse>(
      {url: `/api/ratings`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: ratingRequest
    },
      );
    }
  


export const getCreateOrUpdateRatingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrUpdateRating>>, TError,{data: RatingRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createOrUpdateRating>>, TError,{data: RatingRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createOrUpdateRating>>, {data: RatingRequest}> = (props) => {
          const {data} = props ?? {};

          return  createOrUpdateRating(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateOrUpdateRatingMutationResult = NonNullable<Awaited<ReturnType<typeof createOrUpdateRating>>>
    export type CreateOrUpdateRatingMutationBody = RatingRequest
    export type CreateOrUpdateRatingMutationError = unknown

    /**
 * @summary T·∫°o ho·∫∑c c·∫≠p nh·∫≠t ƒë√°nh gi√°
 */
export const useCreateOrUpdateRating = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrUpdateRating>>, TError,{data: RatingRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createOrUpdateRating>>,
        TError,
        {data: RatingRequest},
        TContext
      > => {

      const mutationOptions = getCreateOrUpdateRatingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary B√°o c√°o ƒë√°nh gi√° kh√¥ng ph√π h·ª£p
 */
export const reportRating = (
    ratingId: string,
    ratingReportRequest: RatingReportRequest,
 ) => {
      
      
      return http<void>(
      {url: `/api/ratings/${ratingId}/report`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: ratingReportRequest
    },
      );
    }
  


export const getReportRatingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof reportRating>>, TError,{ratingId: string;data: RatingReportRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof reportRating>>, TError,{ratingId: string;data: RatingReportRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof reportRating>>, {ratingId: string;data: RatingReportRequest}> = (props) => {
          const {ratingId,data} = props ?? {};

          return  reportRating(ratingId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ReportRatingMutationResult = NonNullable<Awaited<ReturnType<typeof reportRating>>>
    export type ReportRatingMutationBody = RatingReportRequest
    export type ReportRatingMutationError = unknown

    /**
 * @summary B√°o c√°o ƒë√°nh gi√° kh√¥ng ph√π h·ª£p
 */
export const useReportRating = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof reportRating>>, TError,{ratingId: string;data: RatingReportRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof reportRating>>,
        TError,
        {ratingId: string;data: RatingReportRequest},
        TContext
      > => {

      const mutationOptions = getReportRatingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Process refund request
 * @summary Process refund
 */
export const processRefund = (
    id: string,
    refundRequestDto: RefundRequestDto,
 ) => {
      
      
      return http<ApiResponsePaymentResponseDto>(
      {url: `/api/payments/${id}/refund`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: refundRequestDto
    },
      );
    }
  


export const getProcessRefundMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof processRefund>>, TError,{id: string;data: RefundRequestDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof processRefund>>, TError,{id: string;data: RefundRequestDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof processRefund>>, {id: string;data: RefundRequestDto}> = (props) => {
          const {id,data} = props ?? {};

          return  processRefund(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProcessRefundMutationResult = NonNullable<Awaited<ReturnType<typeof processRefund>>>
    export type ProcessRefundMutationBody = RefundRequestDto
    export type ProcessRefundMutationError = unknown

    /**
 * @summary Process refund
 */
export const useProcessRefund = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof processRefund>>, TError,{id: string;data: RefundRequestDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof processRefund>>,
        TError,
        {id: string;data: RefundRequestDto},
        TContext
      > => {

      const mutationOptions = getProcessRefundMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Process Momo payment return callback via GET
 * @summary Process Momo return (GET)
 */
export const processMomoReturnGet = (
    
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponsePaymentResponseDto>(
      {url: `/api/payments/momo-return`, method: 'GET', signal
    },
      );
    }
  

export const getProcessMomoReturnGetQueryKey = () => {
    return [`/api/payments/momo-return`] as const;
    }

    
export const getProcessMomoReturnGetQueryOptions = <TData = Awaited<ReturnType<typeof processMomoReturnGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof processMomoReturnGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProcessMomoReturnGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof processMomoReturnGet>>> = ({ signal }) => processMomoReturnGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof processMomoReturnGet>>, TError, TData> & { queryKey: QueryKey }
}

export type ProcessMomoReturnGetQueryResult = NonNullable<Awaited<ReturnType<typeof processMomoReturnGet>>>
export type ProcessMomoReturnGetQueryError = unknown

/**
 * @summary Process Momo return (GET)
 */
export const useProcessMomoReturnGet = <TData = Awaited<ReturnType<typeof processMomoReturnGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof processMomoReturnGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getProcessMomoReturnGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Process Momo payment return callback
 * @summary Process Momo return
 */
export const processMomoReturnPost = (
    
 ) => {
      
      
      return http<ApiResponsePaymentResponseDto>(
      {url: `/api/payments/momo-return`, method: 'POST'
    },
      );
    }
  


export const getProcessMomoReturnPostMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof processMomoReturnPost>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof processMomoReturnPost>>, TError,void, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof processMomoReturnPost>>, void> = () => {
          

          return  processMomoReturnPost()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProcessMomoReturnPostMutationResult = NonNullable<Awaited<ReturnType<typeof processMomoReturnPost>>>
    
    export type ProcessMomoReturnPostMutationError = unknown

    /**
 * @summary Process Momo return
 */
export const useProcessMomoReturnPost = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof processMomoReturnPost>>, TError,void, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof processMomoReturnPost>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getProcessMomoReturnPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Process Momo Instant Payment Notification
 * @summary Process Momo IPN
 */
export const processMomoIpn = (
    processMomoIpnBody: ProcessMomoIpnBody,
 ) => {
      
      
      return http<ApiResponseString>(
      {url: `/api/payments/momo-ipn`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: processMomoIpnBody
    },
      );
    }
  


export const getProcessMomoIpnMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof processMomoIpn>>, TError,{data: ProcessMomoIpnBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof processMomoIpn>>, TError,{data: ProcessMomoIpnBody}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof processMomoIpn>>, {data: ProcessMomoIpnBody}> = (props) => {
          const {data} = props ?? {};

          return  processMomoIpn(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProcessMomoIpnMutationResult = NonNullable<Awaited<ReturnType<typeof processMomoIpn>>>
    export type ProcessMomoIpnMutationBody = ProcessMomoIpnBody
    export type ProcessMomoIpnMutationError = unknown

    /**
 * @summary Process Momo IPN
 */
export const useProcessMomoIpn = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof processMomoIpn>>, TError,{data: ProcessMomoIpnBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof processMomoIpn>>,
        TError,
        {data: ProcessMomoIpnBody},
        TContext
      > => {

      const mutationOptions = getProcessMomoIpnMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Create a new payment transaction
 * @summary Create payment
 */
export const createPayment = (
    paymentCreateDto: PaymentCreateDto,
 ) => {
      
      
      return http<PaymentResponseDto>(
      {url: `/api/payments/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: paymentCreateDto
    },
      );
    }
  


export const getCreatePaymentMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPayment>>, TError,{data: PaymentCreateDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createPayment>>, TError,{data: PaymentCreateDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createPayment>>, {data: PaymentCreateDto}> = (props) => {
          const {data} = props ?? {};

          return  createPayment(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreatePaymentMutationResult = NonNullable<Awaited<ReturnType<typeof createPayment>>>
    export type CreatePaymentMutationBody = PaymentCreateDto
    export type CreatePaymentMutationError = unknown

    /**
 * @summary Create payment
 */
export const useCreatePayment = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPayment>>, TError,{data: PaymentCreateDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createPayment>>,
        TError,
        {data: PaymentCreateDto},
        TContext
      > => {

      const mutationOptions = getCreatePaymentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary T·∫°o th√¥ng b√°o m·ªõi cho m·ª•c ƒë√≠ch testing
 */
export const createTestNotification = (
    testNotificationRequest: TestNotificationRequest,
 ) => {
      
      
      return http<ApiResponseNotificationResponse>(
      {url: `/api/notifications/test`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: testNotificationRequest
    },
      );
    }
  


export const getCreateTestNotificationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTestNotification>>, TError,{data: TestNotificationRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createTestNotification>>, TError,{data: TestNotificationRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createTestNotification>>, {data: TestNotificationRequest}> = (props) => {
          const {data} = props ?? {};

          return  createTestNotification(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateTestNotificationMutationResult = NonNullable<Awaited<ReturnType<typeof createTestNotification>>>
    export type CreateTestNotificationMutationBody = TestNotificationRequest
    export type CreateTestNotificationMutationError = unknown

    /**
 * @summary T·∫°o th√¥ng b√°o m·ªõi cho m·ª•c ƒë√≠ch testing
 */
export const useCreateTestNotification = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTestNotification>>, TError,{data: TestNotificationRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createTestNotification>>,
        TError,
        {data: TestNotificationRequest},
        TContext
      > => {

      const mutationOptions = getCreateTestNotificationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary L·∫•y t·∫•t c·∫£ token thi·∫øt b·ªã
 */
export const getDeviceTokens = (
    
 signal?: AbortSignal
) => {
      
      
      return http<DeviceTokenResponse[]>(
      {url: `/api/notifications/devices`, method: 'GET', signal
    },
      );
    }
  

export const getGetDeviceTokensQueryKey = () => {
    return [`/api/notifications/devices`] as const;
    }

    
export const getGetDeviceTokensQueryOptions = <TData = Awaited<ReturnType<typeof getDeviceTokens>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDeviceTokens>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDeviceTokensQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDeviceTokens>>> = ({ signal }) => getDeviceTokens(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDeviceTokens>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDeviceTokensQueryResult = NonNullable<Awaited<ReturnType<typeof getDeviceTokens>>>
export type GetDeviceTokensQueryError = unknown

/**
 * @summary L·∫•y t·∫•t c·∫£ token thi·∫øt b·ªã
 */
export const useGetDeviceTokens = <TData = Awaited<ReturnType<typeof getDeviceTokens>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDeviceTokens>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetDeviceTokensQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ƒêƒÉng k√Ω token thi·∫øt b·ªã m·ªõi
 */
export const registerDeviceToken = (
    deviceTokenRequest: DeviceTokenRequest,
 ) => {
      
      
      return http<DeviceTokenResponse>(
      {url: `/api/notifications/devices`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: deviceTokenRequest
    },
      );
    }
  


export const getRegisterDeviceTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerDeviceToken>>, TError,{data: DeviceTokenRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof registerDeviceToken>>, TError,{data: DeviceTokenRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerDeviceToken>>, {data: DeviceTokenRequest}> = (props) => {
          const {data} = props ?? {};

          return  registerDeviceToken(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterDeviceTokenMutationResult = NonNullable<Awaited<ReturnType<typeof registerDeviceToken>>>
    export type RegisterDeviceTokenMutationBody = DeviceTokenRequest
    export type RegisterDeviceTokenMutationError = unknown

    /**
 * @summary ƒêƒÉng k√Ω token thi·∫øt b·ªã m·ªõi
 */
export const useRegisterDeviceToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerDeviceToken>>, TError,{data: DeviceTokenRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof registerDeviceToken>>,
        TError,
        {data: DeviceTokenRequest},
        TContext
      > => {

      const mutationOptions = getRegisterDeviceTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getAllLocations = (
    params: GetAllLocationsParams,
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponsePageLocationDto>(
      {url: `/api/locations`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAllLocationsQueryKey = (params: GetAllLocationsParams,) => {
    return [`/api/locations`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllLocationsQueryOptions = <TData = Awaited<ReturnType<typeof getAllLocations>>, TError = unknown>(params: GetAllLocationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllLocations>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllLocationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllLocations>>> = ({ signal }) => getAllLocations(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllLocations>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAllLocationsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllLocations>>>
export type GetAllLocationsQueryError = unknown

export const useGetAllLocations = <TData = Awaited<ReturnType<typeof getAllLocations>>, TError = unknown>(
 params: GetAllLocationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllLocations>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAllLocationsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const createLocation = (
    locationDto: LocationDto,
 ) => {
      
      
      return http<ApiResponseLocationDto>(
      {url: `/api/locations`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: locationDto
    },
      );
    }
  


export const getCreateLocationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createLocation>>, TError,{data: LocationDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createLocation>>, TError,{data: LocationDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createLocation>>, {data: LocationDto}> = (props) => {
          const {data} = props ?? {};

          return  createLocation(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateLocationMutationResult = NonNullable<Awaited<ReturnType<typeof createLocation>>>
    export type CreateLocationMutationBody = LocationDto
    export type CreateLocationMutationError = unknown

    export const useCreateLocation = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createLocation>>, TError,{data: LocationDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createLocation>>,
        TError,
        {data: LocationDto},
        TContext
      > => {

      const mutationOptions = getCreateLocationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getAllEvents = (
    params: GetAllEventsParams,
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponsePageEventDto>(
      {url: `/api/events`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAllEventsQueryKey = (params: GetAllEventsParams,) => {
    return [`/api/events`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllEventsQueryOptions = <TData = Awaited<ReturnType<typeof getAllEvents>>, TError = unknown>(params: GetAllEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllEvents>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllEventsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllEvents>>> = ({ signal }) => getAllEvents(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllEvents>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAllEventsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllEvents>>>
export type GetAllEventsQueryError = unknown

export const useGetAllEvents = <TData = Awaited<ReturnType<typeof getAllEvents>>, TError = unknown>(
 params: GetAllEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllEvents>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAllEventsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const createEvent = (
    eventCreateDto: EventCreateDto,
 ) => {
      
      
      return http<ApiResponseEventDto>(
      {url: `/api/events`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: eventCreateDto
    },
      );
    }
  


export const getCreateEventMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createEvent>>, TError,{data: EventCreateDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createEvent>>, TError,{data: EventCreateDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createEvent>>, {data: EventCreateDto}> = (props) => {
          const {data} = props ?? {};

          return  createEvent(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateEventMutationResult = NonNullable<Awaited<ReturnType<typeof createEvent>>>
    export type CreateEventMutationBody = EventCreateDto
    export type CreateEventMutationError = unknown

    export const useCreateEvent = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createEvent>>, TError,{data: EventCreateDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createEvent>>,
        TError,
        {data: EventCreateDto},
        TContext
      > => {

      const mutationOptions = getCreateEventMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getEventImages = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponseListImageDto>(
      {url: `/api/events/${id}/images`, method: 'GET', signal
    },
      );
    }
  

export const getGetEventImagesQueryKey = (id: string,) => {
    return [`/api/events/${id}/images`] as const;
    }

    
export const getGetEventImagesQueryOptions = <TData = Awaited<ReturnType<typeof getEventImages>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventImages>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEventImagesQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEventImages>>> = ({ signal }) => getEventImages(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEventImages>>, TError, TData> & { queryKey: QueryKey }
}

export type GetEventImagesQueryResult = NonNullable<Awaited<ReturnType<typeof getEventImages>>>
export type GetEventImagesQueryError = unknown

export const useGetEventImages = <TData = Awaited<ReturnType<typeof getEventImages>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventImages>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetEventImagesQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const uploadEventImage = (
    id: string,
    uploadEventImageBody: UploadEventImageBody,
    params?: UploadEventImageParams,
 ) => {
      
      const formData = new FormData();
formData.append('image', uploadEventImageBody.image)

      return http<ApiResponseImageDto>(
      {url: `/api/events/${id}/images`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData,
        params
    },
      );
    }
  


export const getUploadEventImageMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadEventImage>>, TError,{id: string;data: UploadEventImageBody;params?: UploadEventImageParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof uploadEventImage>>, TError,{id: string;data: UploadEventImageBody;params?: UploadEventImageParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof uploadEventImage>>, {id: string;data: UploadEventImageBody;params?: UploadEventImageParams}> = (props) => {
          const {id,data,params} = props ?? {};

          return  uploadEventImage(id,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UploadEventImageMutationResult = NonNullable<Awaited<ReturnType<typeof uploadEventImage>>>
    export type UploadEventImageMutationBody = UploadEventImageBody
    export type UploadEventImageMutationError = unknown

    export const useUploadEventImage = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadEventImage>>, TError,{id: string;data: UploadEventImageBody;params?: UploadEventImageParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof uploadEventImage>>,
        TError,
        {id: string;data: UploadEventImageBody;params?: UploadEventImageParams},
        TContext
      > => {

      const mutationOptions = getUploadEventImageMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const saveCloudinaryImage = (
    id: string,
    cloudinaryImageRequest: CloudinaryImageRequest,
 ) => {
      
      
      return http<ApiResponseImageDto>(
      {url: `/api/events/${id}/images/cloudinary`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: cloudinaryImageRequest
    },
      );
    }
  


export const getSaveCloudinaryImageMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveCloudinaryImage>>, TError,{id: string;data: CloudinaryImageRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof saveCloudinaryImage>>, TError,{id: string;data: CloudinaryImageRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof saveCloudinaryImage>>, {id: string;data: CloudinaryImageRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  saveCloudinaryImage(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SaveCloudinaryImageMutationResult = NonNullable<Awaited<ReturnType<typeof saveCloudinaryImage>>>
    export type SaveCloudinaryImageMutationBody = CloudinaryImageRequest
    export type SaveCloudinaryImageMutationError = unknown

    export const useSaveCloudinaryImage = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveCloudinaryImage>>, TError,{id: string;data: CloudinaryImageRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof saveCloudinaryImage>>,
        TError,
        {id: string;data: CloudinaryImageRequest},
        TContext
      > => {

      const mutationOptions = getSaveCloudinaryImageMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getTicketTypesByEventId = (
    eventId: string,
    params: GetTicketTypesByEventIdParams,
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponsePageTicketTypeDto>(
      {url: `/api/events/${eventId}/ticket-types`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetTicketTypesByEventIdQueryKey = (eventId: string,
    params: GetTicketTypesByEventIdParams,) => {
    return [`/api/events/${eventId}/ticket-types`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTicketTypesByEventIdQueryOptions = <TData = Awaited<ReturnType<typeof getTicketTypesByEventId>>, TError = unknown>(eventId: string,
    params: GetTicketTypesByEventIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTicketTypesByEventId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTicketTypesByEventIdQueryKey(eventId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTicketTypesByEventId>>> = ({ signal }) => getTicketTypesByEventId(eventId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(eventId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTicketTypesByEventId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetTicketTypesByEventIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTicketTypesByEventId>>>
export type GetTicketTypesByEventIdQueryError = unknown

export const useGetTicketTypesByEventId = <TData = Awaited<ReturnType<typeof getTicketTypesByEventId>>, TError = unknown>(
 eventId: string,
    params: GetTicketTypesByEventIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTicketTypesByEventId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTicketTypesByEventIdQueryOptions(eventId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const createTicketType = (
    eventId: string,
    ticketTypeDto: TicketTypeDto,
 ) => {
      
      
      return http<ApiResponseTicketTypeDto>(
      {url: `/api/events/${eventId}/ticket-types`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: ticketTypeDto
    },
      );
    }
  


export const getCreateTicketTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTicketType>>, TError,{eventId: string;data: TicketTypeDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createTicketType>>, TError,{eventId: string;data: TicketTypeDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createTicketType>>, {eventId: string;data: TicketTypeDto}> = (props) => {
          const {eventId,data} = props ?? {};

          return  createTicketType(eventId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateTicketTypeMutationResult = NonNullable<Awaited<ReturnType<typeof createTicketType>>>
    export type CreateTicketTypeMutationBody = TicketTypeDto
    export type CreateTicketTypeMutationError = unknown

    export const useCreateTicketType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTicketType>>, TError,{eventId: string;data: TicketTypeDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createTicketType>>,
        TError,
        {eventId: string;data: TicketTypeDto},
        TContext
      > => {

      const mutationOptions = getCreateTicketTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const createEventWithImages = (
    createEventWithImagesBody: CreateEventWithImagesBody,
    params: CreateEventWithImagesParams,
 ) => {
      
      const formData = new FormData();
createEventWithImagesBody.images.forEach(value => formData.append('images', value));

      return http<ApiResponseEventDto>(
      {url: `/api/events/create-with-images`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData,
        params
    },
      );
    }
  


export const getCreateEventWithImagesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createEventWithImages>>, TError,{data: CreateEventWithImagesBody;params: CreateEventWithImagesParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createEventWithImages>>, TError,{data: CreateEventWithImagesBody;params: CreateEventWithImagesParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createEventWithImages>>, {data: CreateEventWithImagesBody;params: CreateEventWithImagesParams}> = (props) => {
          const {data,params} = props ?? {};

          return  createEventWithImages(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateEventWithImagesMutationResult = NonNullable<Awaited<ReturnType<typeof createEventWithImages>>>
    export type CreateEventWithImagesMutationBody = CreateEventWithImagesBody
    export type CreateEventWithImagesMutationError = unknown

    export const useCreateEventWithImages = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createEventWithImages>>, TError,{data: CreateEventWithImagesBody;params: CreateEventWithImagesParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createEventWithImages>>,
        TError,
        {data: CreateEventWithImagesBody;params: CreateEventWithImagesParams},
        TContext
      > => {

      const mutationOptions = getCreateEventWithImagesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary H·ªßy ƒëƒÉng k√Ω nh·∫≠n th√¥ng b√°o theo ch·ªß ƒë·ªÅ
 */
export const unsubscribeFromTopic = (
    topicSubscriptionRequest: TopicSubscriptionRequest,
 ) => {
      
      
      return http<ApiResponseBoolean>(
      {url: `/api/devices/topic/unsubscribe`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: topicSubscriptionRequest
    },
      );
    }
  


export const getUnsubscribeFromTopicMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof unsubscribeFromTopic>>, TError,{data: TopicSubscriptionRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof unsubscribeFromTopic>>, TError,{data: TopicSubscriptionRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof unsubscribeFromTopic>>, {data: TopicSubscriptionRequest}> = (props) => {
          const {data} = props ?? {};

          return  unsubscribeFromTopic(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UnsubscribeFromTopicMutationResult = NonNullable<Awaited<ReturnType<typeof unsubscribeFromTopic>>>
    export type UnsubscribeFromTopicMutationBody = TopicSubscriptionRequest
    export type UnsubscribeFromTopicMutationError = unknown

    /**
 * @summary H·ªßy ƒëƒÉng k√Ω nh·∫≠n th√¥ng b√°o theo ch·ªß ƒë·ªÅ
 */
export const useUnsubscribeFromTopic = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof unsubscribeFromTopic>>, TError,{data: TopicSubscriptionRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof unsubscribeFromTopic>>,
        TError,
        {data: TopicSubscriptionRequest},
        TContext
      > => {

      const mutationOptions = getUnsubscribeFromTopicMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary ƒêƒÉng k√Ω nh·∫≠n th√¥ng b√°o theo ch·ªß ƒë·ªÅ
 */
export const subscribeToTopic = (
    topicSubscriptionRequest: TopicSubscriptionRequest,
 ) => {
      
      
      return http<ApiResponseBoolean>(
      {url: `/api/devices/topic/subscribe`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: topicSubscriptionRequest
    },
      );
    }
  


export const getSubscribeToTopicMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscribeToTopic>>, TError,{data: TopicSubscriptionRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof subscribeToTopic>>, TError,{data: TopicSubscriptionRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof subscribeToTopic>>, {data: TopicSubscriptionRequest}> = (props) => {
          const {data} = props ?? {};

          return  subscribeToTopic(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SubscribeToTopicMutationResult = NonNullable<Awaited<ReturnType<typeof subscribeToTopic>>>
    export type SubscribeToTopicMutationBody = TopicSubscriptionRequest
    export type SubscribeToTopicMutationError = unknown

    /**
 * @summary ƒêƒÉng k√Ω nh·∫≠n th√¥ng b√°o theo ch·ªß ƒë·ªÅ
 */
export const useSubscribeToTopic = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscribeToTopic>>, TError,{data: TopicSubscriptionRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof subscribeToTopic>>,
        TError,
        {data: TopicSubscriptionRequest},
        TContext
      > => {

      const mutationOptions = getSubscribeToTopicMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary L·∫•y t·∫•t c·∫£ token thi·∫øt b·ªã c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
 */
export const getUserDeviceTokens = (
    
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponseListDeviceTokenResponse>(
      {url: `/api/devices/tokens`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserDeviceTokensQueryKey = () => {
    return [`/api/devices/tokens`] as const;
    }

    
export const getGetUserDeviceTokensQueryOptions = <TData = Awaited<ReturnType<typeof getUserDeviceTokens>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDeviceTokens>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserDeviceTokensQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserDeviceTokens>>> = ({ signal }) => getUserDeviceTokens(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserDeviceTokens>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUserDeviceTokensQueryResult = NonNullable<Awaited<ReturnType<typeof getUserDeviceTokens>>>
export type GetUserDeviceTokensQueryError = unknown

/**
 * @summary L·∫•y t·∫•t c·∫£ token thi·∫øt b·ªã c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
 */
export const useGetUserDeviceTokens = <TData = Awaited<ReturnType<typeof getUserDeviceTokens>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDeviceTokens>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUserDeviceTokensQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ƒêƒÉng k√Ω token thi·∫øt b·ªã m·ªõi
 */
export const registerDeviceToken1 = (
    deviceTokenRequest: DeviceTokenRequest,
 ) => {
      
      
      return http<ApiResponseDeviceTokenResponse>(
      {url: `/api/devices/tokens`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: deviceTokenRequest
    },
      );
    }
  


export const getRegisterDeviceToken1MutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerDeviceToken1>>, TError,{data: DeviceTokenRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof registerDeviceToken1>>, TError,{data: DeviceTokenRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerDeviceToken1>>, {data: DeviceTokenRequest}> = (props) => {
          const {data} = props ?? {};

          return  registerDeviceToken1(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterDeviceToken1MutationResult = NonNullable<Awaited<ReturnType<typeof registerDeviceToken1>>>
    export type RegisterDeviceToken1MutationBody = DeviceTokenRequest
    export type RegisterDeviceToken1MutationError = unknown

    /**
 * @summary ƒêƒÉng k√Ω token thi·∫øt b·ªã m·ªõi
 */
export const useRegisterDeviceToken1 = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerDeviceToken1>>, TError,{data: DeviceTokenRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof registerDeviceToken1>>,
        TError,
        {data: DeviceTokenRequest},
        TContext
      > => {

      const mutationOptions = getRegisterDeviceToken1MutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary X√≥a t·∫•t c·∫£ token thi·∫øt b·ªã c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
 */
export const deleteAllDeviceTokens = (
    
 ) => {
      
      
      return http<ApiResponseInteger>(
      {url: `/api/devices/tokens`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteAllDeviceTokensMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAllDeviceTokens>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteAllDeviceTokens>>, TError,void, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAllDeviceTokens>>, void> = () => {
          

          return  deleteAllDeviceTokens()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAllDeviceTokensMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAllDeviceTokens>>>
    
    export type DeleteAllDeviceTokensMutationError = unknown

    /**
 * @summary X√≥a t·∫•t c·∫£ token thi·∫øt b·ªã c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
 */
export const useDeleteAllDeviceTokens = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAllDeviceTokens>>, TError,void, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteAllDeviceTokens>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getDeleteAllDeviceTokensMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary T·∫°o b√¨nh lu·∫≠n m·ªõi
 */
export const createComment = (
    commentRequest: CommentRequest,
 ) => {
      
      
      return http<CommentResponse>(
      {url: `/api/comments`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: commentRequest
    },
      );
    }
  


export const getCreateCommentMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createComment>>, TError,{data: CommentRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createComment>>, TError,{data: CommentRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createComment>>, {data: CommentRequest}> = (props) => {
          const {data} = props ?? {};

          return  createComment(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateCommentMutationResult = NonNullable<Awaited<ReturnType<typeof createComment>>>
    export type CreateCommentMutationBody = CommentRequest
    export type CreateCommentMutationError = unknown

    /**
 * @summary T·∫°o b√¨nh lu·∫≠n m·ªõi
 */
export const useCreateComment = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createComment>>, TError,{data: CommentRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createComment>>,
        TError,
        {data: CommentRequest},
        TContext
      > => {

      const mutationOptions = getCreateCommentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary B√°o c√°o b√¨nh lu·∫≠n kh√¥ng ph√π h·ª£p
 */
export const reportComment = (
    commentId: string,
    commentReportRequest: CommentReportRequest,
 ) => {
      
      
      return http<void>(
      {url: `/api/comments/${commentId}/report`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: commentReportRequest
    },
      );
    }
  


export const getReportCommentMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof reportComment>>, TError,{commentId: string;data: CommentReportRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof reportComment>>, TError,{commentId: string;data: CommentReportRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof reportComment>>, {commentId: string;data: CommentReportRequest}> = (props) => {
          const {commentId,data} = props ?? {};

          return  reportComment(commentId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ReportCommentMutationResult = NonNullable<Awaited<ReturnType<typeof reportComment>>>
    export type ReportCommentMutationBody = CommentReportRequest
    export type ReportCommentMutationError = unknown

    /**
 * @summary B√°o c√°o b√¨nh lu·∫≠n kh√¥ng ph√π h·ª£p
 */
export const useReportComment = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof reportComment>>, TError,{commentId: string;data: CommentReportRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof reportComment>>,
        TError,
        {commentId: string;data: CommentReportRequest},
        TContext
      > => {

      const mutationOptions = getReportCommentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getAllCategories = (
    params: GetAllCategoriesParams,
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponsePageCategoryDto>(
      {url: `/api/categories`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAllCategoriesQueryKey = (params: GetAllCategoriesParams,) => {
    return [`/api/categories`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllCategoriesQueryOptions = <TData = Awaited<ReturnType<typeof getAllCategories>>, TError = unknown>(params: GetAllCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCategories>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllCategoriesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllCategories>>> = ({ signal }) => getAllCategories(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllCategories>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAllCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllCategories>>>
export type GetAllCategoriesQueryError = unknown

export const useGetAllCategories = <TData = Awaited<ReturnType<typeof getAllCategories>>, TError = unknown>(
 params: GetAllCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCategories>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAllCategoriesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const createCategory = (
    categoryDto: CategoryDto,
 ) => {
      
      
      return http<ApiResponseCategoryDto>(
      {url: `/api/categories`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: categoryDto
    },
      );
    }
  


export const getCreateCategoryMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCategory>>, TError,{data: CategoryDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createCategory>>, TError,{data: CategoryDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createCategory>>, {data: CategoryDto}> = (props) => {
          const {data} = props ?? {};

          return  createCategory(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof createCategory>>>
    export type CreateCategoryMutationBody = CategoryDto
    export type CreateCategoryMutationError = unknown

    export const useCreateCategory = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCategory>>, TError,{data: CategoryDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createCategory>>,
        TError,
        {data: CategoryDto},
        TContext
      > => {

      const mutationOptions = getCreateCategoryMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi
 */
export const registerUser = (
    userCreateDto: UserCreateDto,
 ) => {
      
      
      return http<ApiResponseUserDto>(
      {url: `/api/auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userCreateDto
    },
      );
    }
  


export const getRegisterUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerUser>>, TError,{data: UserCreateDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof registerUser>>, TError,{data: UserCreateDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerUser>>, {data: UserCreateDto}> = (props) => {
          const {data} = props ?? {};

          return  registerUser(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterUserMutationResult = NonNullable<Awaited<ReturnType<typeof registerUser>>>
    export type RegisterUserMutationBody = UserCreateDto
    export type RegisterUserMutationError = unknown

    /**
 * @summary ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi
 */
export const useRegisterUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerUser>>, TError,{data: UserCreateDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof registerUser>>,
        TError,
        {data: UserCreateDto},
        TContext
      > => {

      const mutationOptions = getRegisterUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Refresh JWT token
 */
export const refreshToken = (
    refreshTokenRequest: RefreshTokenRequest,
 ) => {
      
      
      return http<ApiResponseUserAuthResponseDto>(
      {url: `/api/auth/refresh-token`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: refreshTokenRequest
    },
      );
    }
  


export const getRefreshTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof refreshToken>>, TError,{data: RefreshTokenRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof refreshToken>>, TError,{data: RefreshTokenRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof refreshToken>>, {data: RefreshTokenRequest}> = (props) => {
          const {data} = props ?? {};

          return  refreshToken(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RefreshTokenMutationResult = NonNullable<Awaited<ReturnType<typeof refreshToken>>>
    export type RefreshTokenMutationBody = RefreshTokenRequest
    export type RefreshTokenMutationError = unknown

    /**
 * @summary Refresh JWT token
 */
export const useRefreshToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof refreshToken>>, TError,{data: RefreshTokenRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof refreshToken>>,
        TError,
        {data: RefreshTokenRequest},
        TContext
      > => {

      const mutationOptions = getRefreshTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u v·ªõi token
 */
export const resetPassword = (
    passwordResetDto: PasswordResetDto,
 ) => {
      
      
      return http<ApiResponseString>(
      {url: `/api/auth/password/reset`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: passwordResetDto
    },
      );
    }
  


export const getResetPasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resetPassword>>, TError,{data: PasswordResetDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof resetPassword>>, TError,{data: PasswordResetDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof resetPassword>>, {data: PasswordResetDto}> = (props) => {
          const {data} = props ?? {};

          return  resetPassword(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ResetPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof resetPassword>>>
    export type ResetPasswordMutationBody = PasswordResetDto
    export type ResetPasswordMutationError = unknown

    /**
 * @summary ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u v·ªõi token
 */
export const useResetPassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resetPassword>>, TError,{data: PasswordResetDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof resetPassword>>,
        TError,
        {data: PasswordResetDto},
        TContext
      > => {

      const mutationOptions = getResetPasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
 */
export const requestPasswordReset = (
    params: RequestPasswordResetParams,
 ) => {
      
      
      return http<ApiResponseString>(
      {url: `/api/auth/password/forgot`, method: 'POST',
        params
    },
      );
    }
  


export const getRequestPasswordResetMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof requestPasswordReset>>, TError,{params: RequestPasswordResetParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof requestPasswordReset>>, TError,{params: RequestPasswordResetParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof requestPasswordReset>>, {params: RequestPasswordResetParams}> = (props) => {
          const {params} = props ?? {};

          return  requestPasswordReset(params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RequestPasswordResetMutationResult = NonNullable<Awaited<ReturnType<typeof requestPasswordReset>>>
    
    export type RequestPasswordResetMutationError = unknown

    /**
 * @summary Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
 */
export const useRequestPasswordReset = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof requestPasswordReset>>, TError,{params: RequestPasswordResetParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof requestPasswordReset>>,
        TError,
        {params: RequestPasswordResetParams},
        TContext
      > => {

      const mutationOptions = getRequestPasswordResetMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary ƒêƒÉng xu·∫•t ng∆∞·ªùi d√πng
 */
export const logout = (
    logoutRequest: LogoutRequest,
 ) => {
      
      
      return http<ApiResponseString>(
      {url: `/api/auth/logout`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: logoutRequest
    },
      );
    }
  


export const getLogoutMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof logout>>, TError,{data: LogoutRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof logout>>, TError,{data: LogoutRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof logout>>, {data: LogoutRequest}> = (props) => {
          const {data} = props ?? {};

          return  logout(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LogoutMutationResult = NonNullable<Awaited<ReturnType<typeof logout>>>
    export type LogoutMutationBody = LogoutRequest
    export type LogoutMutationError = unknown

    /**
 * @summary ƒêƒÉng xu·∫•t ng∆∞·ªùi d√πng
 */
export const useLogout = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof logout>>, TError,{data: LogoutRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof logout>>,
        TError,
        {data: LogoutRequest},
        TContext
      > => {

      const mutationOptions = getLogoutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary ƒêƒÉng nh·∫≠p
 */
export const authenticateUser = (
    loginRequestDto: LoginRequestDto,
 ) => {
      
      
      return http<ApiResponseUserAuthResponseDto>(
      {url: `/api/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginRequestDto
    },
      );
    }
  


export const getAuthenticateUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authenticateUser>>, TError,{data: LoginRequestDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authenticateUser>>, TError,{data: LoginRequestDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authenticateUser>>, {data: LoginRequestDto}> = (props) => {
          const {data} = props ?? {};

          return  authenticateUser(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthenticateUserMutationResult = NonNullable<Awaited<ReturnType<typeof authenticateUser>>>
    export type AuthenticateUserMutationBody = LoginRequestDto
    export type AuthenticateUserMutationError = unknown

    /**
 * @summary ƒêƒÉng nh·∫≠p
 */
export const useAuthenticateUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authenticateUser>>, TError,{data: LoginRequestDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof authenticateUser>>,
        TError,
        {data: LoginRequestDto},
        TContext
      > => {

      const mutationOptions = getAuthenticateUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary ƒêƒÉng nh·∫≠p b·∫±ng Google
 */
export const authenticateWithGoogle = (
    googleAuthRequestDto: GoogleAuthRequestDto,
 ) => {
      
      
      return http<ApiResponseUserAuthResponseDto>(
      {url: `/api/auth/google`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: googleAuthRequestDto
    },
      );
    }
  


export const getAuthenticateWithGoogleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authenticateWithGoogle>>, TError,{data: GoogleAuthRequestDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authenticateWithGoogle>>, TError,{data: GoogleAuthRequestDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authenticateWithGoogle>>, {data: GoogleAuthRequestDto}> = (props) => {
          const {data} = props ?? {};

          return  authenticateWithGoogle(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthenticateWithGoogleMutationResult = NonNullable<Awaited<ReturnType<typeof authenticateWithGoogle>>>
    export type AuthenticateWithGoogleMutationBody = GoogleAuthRequestDto
    export type AuthenticateWithGoogleMutationError = unknown

    /**
 * @summary ƒêƒÉng nh·∫≠p b·∫±ng Google
 */
export const useAuthenticateWithGoogle = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authenticateWithGoogle>>, TError,{data: GoogleAuthRequestDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof authenticateWithGoogle>>,
        TError,
        {data: GoogleAuthRequestDto},
        TContext
      > => {

      const mutationOptions = getAuthenticateWithGoogleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Get payments for current user
 * @summary Get current user payments
 */
export const getCurrentUserPayments = (
    
 signal?: AbortSignal
) => {
      
      
      return http<PaymentResponseDto[]>(
      {url: `/api/users/me/payments`, method: 'GET', signal
    },
      );
    }
  

export const getGetCurrentUserPaymentsQueryKey = () => {
    return [`/api/users/me/payments`] as const;
    }

    
export const getGetCurrentUserPaymentsQueryOptions = <TData = Awaited<ReturnType<typeof getCurrentUserPayments>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserPayments>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCurrentUserPaymentsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentUserPayments>>> = ({ signal }) => getCurrentUserPayments(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserPayments>>, TError, TData> & { queryKey: QueryKey }
}

export type GetCurrentUserPaymentsQueryResult = NonNullable<Awaited<ReturnType<typeof getCurrentUserPayments>>>
export type GetCurrentUserPaymentsQueryError = unknown

/**
 * @summary Get current user payments
 */
export const useGetCurrentUserPayments = <TData = Awaited<ReturnType<typeof getCurrentUserPayments>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserPayments>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetCurrentUserPaymentsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo email (Admin only)
 */
export const getUserByEmail = (
    email: string,
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponseUserDto>(
      {url: `/api/users/email/${email}`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserByEmailQueryKey = (email: string,) => {
    return [`/api/users/email/${email}`] as const;
    }

    
export const getGetUserByEmailQueryOptions = <TData = Awaited<ReturnType<typeof getUserByEmail>>, TError = unknown>(email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserByEmail>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserByEmailQueryKey(email);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserByEmail>>> = ({ signal }) => getUserByEmail(email, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(email), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserByEmail>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUserByEmailQueryResult = NonNullable<Awaited<ReturnType<typeof getUserByEmail>>>
export type GetUserByEmailQueryError = unknown

/**
 * @summary L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo email (Admin only)
 */
export const useGetUserByEmail = <TData = Awaited<ReturnType<typeof getUserByEmail>>, TError = unknown>(
 email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserByEmail>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUserByEmailQueryOptions(email,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getTicketById = (
    ticketId: string,
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponseTicketDto>(
      {url: `/api/tickets/${ticketId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetTicketByIdQueryKey = (ticketId: string,) => {
    return [`/api/tickets/${ticketId}`] as const;
    }

    
export const getGetTicketByIdQueryOptions = <TData = Awaited<ReturnType<typeof getTicketById>>, TError = unknown>(ticketId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTicketById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTicketByIdQueryKey(ticketId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTicketById>>> = ({ signal }) => getTicketById(ticketId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ticketId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTicketById>>, TError, TData> & { queryKey: QueryKey }
}

export type GetTicketByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTicketById>>>
export type GetTicketByIdQueryError = unknown

export const useGetTicketById = <TData = Awaited<ReturnType<typeof getTicketById>>, TError = unknown>(
 ticketId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTicketById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTicketByIdQueryOptions(ticketId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getTicketByNumber = (
    ticketNumber: string,
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponseTicketDto>(
      {url: `/api/tickets/number/${ticketNumber}`, method: 'GET', signal
    },
      );
    }
  

export const getGetTicketByNumberQueryKey = (ticketNumber: string,) => {
    return [`/api/tickets/number/${ticketNumber}`] as const;
    }

    
export const getGetTicketByNumberQueryOptions = <TData = Awaited<ReturnType<typeof getTicketByNumber>>, TError = unknown>(ticketNumber: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTicketByNumber>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTicketByNumberQueryKey(ticketNumber);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTicketByNumber>>> = ({ signal }) => getTicketByNumber(ticketNumber, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ticketNumber), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTicketByNumber>>, TError, TData> & { queryKey: QueryKey }
}

export type GetTicketByNumberQueryResult = NonNullable<Awaited<ReturnType<typeof getTicketByNumber>>>
export type GetTicketByNumberQueryError = unknown

export const useGetTicketByNumber = <TData = Awaited<ReturnType<typeof getTicketByNumber>>, TError = unknown>(
 ticketNumber: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTicketByNumber>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTicketByNumberQueryOptions(ticketNumber,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getMyTickets = (
    params: GetMyTicketsParams,
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponsePageTicketDto>(
      {url: `/api/tickets/my-tickets`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMyTicketsQueryKey = (params: GetMyTicketsParams,) => {
    return [`/api/tickets/my-tickets`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMyTicketsQueryOptions = <TData = Awaited<ReturnType<typeof getMyTickets>>, TError = unknown>(params: GetMyTicketsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyTickets>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMyTicketsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMyTickets>>> = ({ signal }) => getMyTickets(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMyTickets>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMyTicketsQueryResult = NonNullable<Awaited<ReturnType<typeof getMyTickets>>>
export type GetMyTicketsQueryError = unknown

export const useGetMyTickets = <TData = Awaited<ReturnType<typeof getMyTickets>>, TError = unknown>(
 params: GetMyTicketsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyTickets>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetMyTicketsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getMyPendingTickets = (
    
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponseListTicketPurchaseResponseDto>(
      {url: `/api/tickets/my-pending-tickets`, method: 'GET', signal
    },
      );
    }
  

export const getGetMyPendingTicketsQueryKey = () => {
    return [`/api/tickets/my-pending-tickets`] as const;
    }

    
export const getGetMyPendingTicketsQueryOptions = <TData = Awaited<ReturnType<typeof getMyPendingTickets>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyPendingTickets>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMyPendingTicketsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMyPendingTickets>>> = ({ signal }) => getMyPendingTickets(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMyPendingTickets>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMyPendingTicketsQueryResult = NonNullable<Awaited<ReturnType<typeof getMyPendingTickets>>>
export type GetMyPendingTicketsQueryError = unknown

export const useGetMyPendingTickets = <TData = Awaited<ReturnType<typeof getMyPendingTickets>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyPendingTickets>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetMyPendingTicketsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getTicketsByEventId = (
    eventId: string,
    params: GetTicketsByEventIdParams,
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponsePageTicketDto>(
      {url: `/api/tickets/event/${eventId}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetTicketsByEventIdQueryKey = (eventId: string,
    params: GetTicketsByEventIdParams,) => {
    return [`/api/tickets/event/${eventId}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTicketsByEventIdQueryOptions = <TData = Awaited<ReturnType<typeof getTicketsByEventId>>, TError = unknown>(eventId: string,
    params: GetTicketsByEventIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTicketsByEventId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTicketsByEventIdQueryKey(eventId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTicketsByEventId>>> = ({ signal }) => getTicketsByEventId(eventId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(eventId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTicketsByEventId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetTicketsByEventIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTicketsByEventId>>>
export type GetTicketsByEventIdQueryError = unknown

export const useGetTicketsByEventId = <TData = Awaited<ReturnType<typeof getTicketsByEventId>>, TError = unknown>(
 eventId: string,
    params: GetTicketsByEventIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTicketsByEventId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTicketsByEventIdQueryOptions(eventId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const checkTicketAvailability = (
    id: string,
    params?: CheckTicketAvailabilityParams,
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponseBoolean>(
      {url: `/api/ticket-types/${id}/availability`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getCheckTicketAvailabilityQueryKey = (id: string,
    params?: CheckTicketAvailabilityParams,) => {
    return [`/api/ticket-types/${id}/availability`, ...(params ? [params]: [])] as const;
    }

    
export const getCheckTicketAvailabilityQueryOptions = <TData = Awaited<ReturnType<typeof checkTicketAvailability>>, TError = unknown>(id: string,
    params?: CheckTicketAvailabilityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof checkTicketAvailability>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCheckTicketAvailabilityQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof checkTicketAvailability>>> = ({ signal }) => checkTicketAvailability(id,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof checkTicketAvailability>>, TError, TData> & { queryKey: QueryKey }
}

export type CheckTicketAvailabilityQueryResult = NonNullable<Awaited<ReturnType<typeof checkTicketAvailability>>>
export type CheckTicketAvailabilityQueryError = unknown

export const useCheckTicketAvailability = <TData = Awaited<ReturnType<typeof checkTicketAvailability>>, TError = unknown>(
 id: string,
    params?: CheckTicketAvailabilityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof checkTicketAvailability>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getCheckTicketAvailabilityQueryOptions(id,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getReportsByCurrentUser = (
    params: GetReportsByCurrentUserParams,
 signal?: AbortSignal
) => {
      
      
      return http<PageReportSummaryDto>(
      {url: `/api/reports`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetReportsByCurrentUserQueryKey = (params: GetReportsByCurrentUserParams,) => {
    return [`/api/reports`, ...(params ? [params]: [])] as const;
    }

    
export const getGetReportsByCurrentUserQueryOptions = <TData = Awaited<ReturnType<typeof getReportsByCurrentUser>>, TError = unknown>(params: GetReportsByCurrentUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReportsByCurrentUser>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetReportsByCurrentUserQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getReportsByCurrentUser>>> = ({ signal }) => getReportsByCurrentUser(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getReportsByCurrentUser>>, TError, TData> & { queryKey: QueryKey }
}

export type GetReportsByCurrentUserQueryResult = NonNullable<Awaited<ReturnType<typeof getReportsByCurrentUser>>>
export type GetReportsByCurrentUserQueryError = unknown

export const useGetReportsByCurrentUser = <TData = Awaited<ReturnType<typeof getReportsByCurrentUser>>, TError = unknown>(
 params: GetReportsByCurrentUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReportsByCurrentUser>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetReportsByCurrentUserQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getReportById = (
    reportId: number,
 signal?: AbortSignal
) => {
      
      
      return http<ReportDto>(
      {url: `/api/reports/${reportId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetReportByIdQueryKey = (reportId: number,) => {
    return [`/api/reports/${reportId}`] as const;
    }

    
export const getGetReportByIdQueryOptions = <TData = Awaited<ReturnType<typeof getReportById>>, TError = unknown>(reportId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReportById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetReportByIdQueryKey(reportId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getReportById>>> = ({ signal }) => getReportById(reportId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(reportId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getReportById>>, TError, TData> & { queryKey: QueryKey }
}

export type GetReportByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getReportById>>>
export type GetReportByIdQueryError = unknown

export const useGetReportById = <TData = Awaited<ReturnType<typeof getReportById>>, TError = unknown>(
 reportId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReportById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetReportByIdQueryOptions(reportId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const exportReportToPdf = (
    reportId: number,
 signal?: AbortSignal
) => {
      
      
      return http<void>(
      {url: `/api/reports/${reportId}/export/pdf`, method: 'GET', signal
    },
      );
    }
  

export const getExportReportToPdfQueryKey = (reportId: number,) => {
    return [`/api/reports/${reportId}/export/pdf`] as const;
    }

    
export const getExportReportToPdfQueryOptions = <TData = Awaited<ReturnType<typeof exportReportToPdf>>, TError = unknown>(reportId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof exportReportToPdf>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getExportReportToPdfQueryKey(reportId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof exportReportToPdf>>> = ({ signal }) => exportReportToPdf(reportId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(reportId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof exportReportToPdf>>, TError, TData> & { queryKey: QueryKey }
}

export type ExportReportToPdfQueryResult = NonNullable<Awaited<ReturnType<typeof exportReportToPdf>>>
export type ExportReportToPdfQueryError = unknown

export const useExportReportToPdf = <TData = Awaited<ReturnType<typeof exportReportToPdf>>, TError = unknown>(
 reportId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof exportReportToPdf>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getExportReportToPdfQueryOptions(reportId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const exportReportToExcel = (
    reportId: number,
 signal?: AbortSignal
) => {
      
      
      return http<void>(
      {url: `/api/reports/${reportId}/export/excel`, method: 'GET', signal
    },
      );
    }
  

export const getExportReportToExcelQueryKey = (reportId: number,) => {
    return [`/api/reports/${reportId}/export/excel`] as const;
    }

    
export const getExportReportToExcelQueryOptions = <TData = Awaited<ReturnType<typeof exportReportToExcel>>, TError = unknown>(reportId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof exportReportToExcel>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getExportReportToExcelQueryKey(reportId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof exportReportToExcel>>> = ({ signal }) => exportReportToExcel(reportId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(reportId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof exportReportToExcel>>, TError, TData> & { queryKey: QueryKey }
}

export type ExportReportToExcelQueryResult = NonNullable<Awaited<ReturnType<typeof exportReportToExcel>>>
export type ExportReportToExcelQueryError = unknown

export const useExportReportToExcel = <TData = Awaited<ReturnType<typeof exportReportToExcel>>, TError = unknown>(
 reportId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof exportReportToExcel>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getExportReportToExcelQueryOptions(reportId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getReportsByType = (
    type: string,
    params: GetReportsByTypeParams,
 signal?: AbortSignal
) => {
      
      
      return http<PageReportSummaryDto>(
      {url: `/api/reports/type/${type}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetReportsByTypeQueryKey = (type: string,
    params: GetReportsByTypeParams,) => {
    return [`/api/reports/type/${type}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetReportsByTypeQueryOptions = <TData = Awaited<ReturnType<typeof getReportsByType>>, TError = unknown>(type: string,
    params: GetReportsByTypeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReportsByType>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetReportsByTypeQueryKey(type,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getReportsByType>>> = ({ signal }) => getReportsByType(type,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(type), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getReportsByType>>, TError, TData> & { queryKey: QueryKey }
}

export type GetReportsByTypeQueryResult = NonNullable<Awaited<ReturnType<typeof getReportsByType>>>
export type GetReportsByTypeQueryError = unknown

export const useGetReportsByType = <TData = Awaited<ReturnType<typeof getReportsByType>>, TError = unknown>(
 type: string,
    params: GetReportsByTypeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReportsByType>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetReportsByTypeQueryOptions(type,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getReportsByEvent = (
    eventId: string,
    params: GetReportsByEventParams,
 signal?: AbortSignal
) => {
      
      
      return http<PageReportSummaryDto>(
      {url: `/api/reports/event/${eventId}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetReportsByEventQueryKey = (eventId: string,
    params: GetReportsByEventParams,) => {
    return [`/api/reports/event/${eventId}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetReportsByEventQueryOptions = <TData = Awaited<ReturnType<typeof getReportsByEvent>>, TError = unknown>(eventId: string,
    params: GetReportsByEventParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReportsByEvent>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetReportsByEventQueryKey(eventId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getReportsByEvent>>> = ({ signal }) => getReportsByEvent(eventId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(eventId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getReportsByEvent>>, TError, TData> & { queryKey: QueryKey }
}

export type GetReportsByEventQueryResult = NonNullable<Awaited<ReturnType<typeof getReportsByEvent>>>
export type GetReportsByEventQueryError = unknown

export const useGetReportsByEvent = <TData = Awaited<ReturnType<typeof getReportsByEvent>>, TError = unknown>(
 eventId: string,
    params: GetReportsByEventParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReportsByEvent>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetReportsByEventQueryOptions(eventId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getTicketSalesByType = (
    eventId: string,
 signal?: AbortSignal
) => {
      
      
      return http<GetTicketSalesByType200>(
      {url: `/api/reports/dashboard/ticket-sales/${eventId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetTicketSalesByTypeQueryKey = (eventId: string,) => {
    return [`/api/reports/dashboard/ticket-sales/${eventId}`] as const;
    }

    
export const getGetTicketSalesByTypeQueryOptions = <TData = Awaited<ReturnType<typeof getTicketSalesByType>>, TError = unknown>(eventId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTicketSalesByType>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTicketSalesByTypeQueryKey(eventId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTicketSalesByType>>> = ({ signal }) => getTicketSalesByType(eventId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(eventId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTicketSalesByType>>, TError, TData> & { queryKey: QueryKey }
}

export type GetTicketSalesByTypeQueryResult = NonNullable<Awaited<ReturnType<typeof getTicketSalesByType>>>
export type GetTicketSalesByTypeQueryError = unknown

export const useGetTicketSalesByType = <TData = Awaited<ReturnType<typeof getTicketSalesByType>>, TError = unknown>(
 eventId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTicketSalesByType>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTicketSalesByTypeQueryOptions(eventId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getDailyRevenue = (
    params: GetDailyRevenueParams,
 signal?: AbortSignal
) => {
      
      
      return http<GetDailyRevenue200>(
      {url: `/api/reports/dashboard/daily-revenue`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDailyRevenueQueryKey = (params: GetDailyRevenueParams,) => {
    return [`/api/reports/dashboard/daily-revenue`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDailyRevenueQueryOptions = <TData = Awaited<ReturnType<typeof getDailyRevenue>>, TError = unknown>(params: GetDailyRevenueParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDailyRevenue>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDailyRevenueQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDailyRevenue>>> = ({ signal }) => getDailyRevenue(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDailyRevenue>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDailyRevenueQueryResult = NonNullable<Awaited<ReturnType<typeof getDailyRevenue>>>
export type GetDailyRevenueQueryError = unknown

export const useGetDailyRevenue = <TData = Awaited<ReturnType<typeof getDailyRevenue>>, TError = unknown>(
 params: GetDailyRevenueParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDailyRevenue>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetDailyRevenueQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getCheckInStatistics = (
    eventId: string,
 signal?: AbortSignal
) => {
      
      
      return http<GetCheckInStatistics200>(
      {url: `/api/reports/dashboard/check-in-statistics/${eventId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetCheckInStatisticsQueryKey = (eventId: string,) => {
    return [`/api/reports/dashboard/check-in-statistics/${eventId}`] as const;
    }

    
export const getGetCheckInStatisticsQueryOptions = <TData = Awaited<ReturnType<typeof getCheckInStatistics>>, TError = unknown>(eventId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCheckInStatistics>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCheckInStatisticsQueryKey(eventId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCheckInStatistics>>> = ({ signal }) => getCheckInStatistics(eventId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(eventId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCheckInStatistics>>, TError, TData> & { queryKey: QueryKey }
}

export type GetCheckInStatisticsQueryResult = NonNullable<Awaited<ReturnType<typeof getCheckInStatistics>>>
export type GetCheckInStatisticsQueryError = unknown

export const useGetCheckInStatistics = <TData = Awaited<ReturnType<typeof getCheckInStatistics>>, TError = unknown>(
 eventId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCheckInStatistics>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetCheckInStatisticsQueryOptions(eventId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary L·∫•y danh s√°ch ƒë√°nh gi√° c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
 */
export const getRatingsByCurrentUser = (
    params?: GetRatingsByCurrentUserParams,
 signal?: AbortSignal
) => {
      
      
      return http<RatingPageResponse>(
      {url: `/api/ratings/me`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetRatingsByCurrentUserQueryKey = (params?: GetRatingsByCurrentUserParams,) => {
    return [`/api/ratings/me`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRatingsByCurrentUserQueryOptions = <TData = Awaited<ReturnType<typeof getRatingsByCurrentUser>>, TError = unknown>(params?: GetRatingsByCurrentUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRatingsByCurrentUser>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRatingsByCurrentUserQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRatingsByCurrentUser>>> = ({ signal }) => getRatingsByCurrentUser(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRatingsByCurrentUser>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRatingsByCurrentUserQueryResult = NonNullable<Awaited<ReturnType<typeof getRatingsByCurrentUser>>>
export type GetRatingsByCurrentUserQueryError = unknown

/**
 * @summary L·∫•y danh s√°ch ƒë√°nh gi√° c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
 */
export const useGetRatingsByCurrentUser = <TData = Awaited<ReturnType<typeof getRatingsByCurrentUser>>, TError = unknown>(
 params?: GetRatingsByCurrentUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRatingsByCurrentUser>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRatingsByCurrentUserQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary L·∫•y danh s√°ch ƒë√°nh gi√° c·ªßa m·ªôt s·ª± ki·ªán
 */
export const getRatingsByEventId = (
    eventId: string,
    params?: GetRatingsByEventIdParams,
 signal?: AbortSignal
) => {
      
      
      return http<RatingPageResponse>(
      {url: `/api/ratings/events/${eventId}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetRatingsByEventIdQueryKey = (eventId: string,
    params?: GetRatingsByEventIdParams,) => {
    return [`/api/ratings/events/${eventId}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRatingsByEventIdQueryOptions = <TData = Awaited<ReturnType<typeof getRatingsByEventId>>, TError = unknown>(eventId: string,
    params?: GetRatingsByEventIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRatingsByEventId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRatingsByEventIdQueryKey(eventId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRatingsByEventId>>> = ({ signal }) => getRatingsByEventId(eventId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(eventId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRatingsByEventId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRatingsByEventIdQueryResult = NonNullable<Awaited<ReturnType<typeof getRatingsByEventId>>>
export type GetRatingsByEventIdQueryError = unknown

/**
 * @summary L·∫•y danh s√°ch ƒë√°nh gi√° c·ªßa m·ªôt s·ª± ki·ªán
 */
export const useGetRatingsByEventId = <TData = Awaited<ReturnType<typeof getRatingsByEventId>>, TError = unknown>(
 eventId: string,
    params?: GetRatingsByEventIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRatingsByEventId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRatingsByEventIdQueryOptions(eventId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary L·∫•y ƒë√°nh gi√° c·ªßa ng∆∞·ªùi d√πng cho s·ª± ki·ªán
 */
export const getUserRatingForEvent = (
    eventId: string,
    userId: string,
 signal?: AbortSignal
) => {
      
      
      return http<RatingResponse>(
      {url: `/api/ratings/events/${eventId}/user/${userId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserRatingForEventQueryKey = (eventId: string,
    userId: string,) => {
    return [`/api/ratings/events/${eventId}/user/${userId}`] as const;
    }

    
export const getGetUserRatingForEventQueryOptions = <TData = Awaited<ReturnType<typeof getUserRatingForEvent>>, TError = unknown>(eventId: string,
    userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserRatingForEvent>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserRatingForEventQueryKey(eventId,userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserRatingForEvent>>> = ({ signal }) => getUserRatingForEvent(eventId,userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(eventId && userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserRatingForEvent>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUserRatingForEventQueryResult = NonNullable<Awaited<ReturnType<typeof getUserRatingForEvent>>>
export type GetUserRatingForEventQueryError = unknown

/**
 * @summary L·∫•y ƒë√°nh gi√° c·ªßa ng∆∞·ªùi d√πng cho s·ª± ki·ªán
 */
export const useGetUserRatingForEvent = <TData = Awaited<ReturnType<typeof getUserRatingForEvent>>, TError = unknown>(
 eventId: string,
    userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserRatingForEvent>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUserRatingForEventQueryOptions(eventId,userId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary L·∫•y th·ªëng k√™ ƒë√°nh gi√° c·ªßa m·ªôt s·ª± ki·ªán
 */
export const getRatingStatistics = (
    eventId: string,
 signal?: AbortSignal
) => {
      
      
      return http<RatingStatisticsResponse>(
      {url: `/api/ratings/events/${eventId}/statistics`, method: 'GET', signal
    },
      );
    }
  

export const getGetRatingStatisticsQueryKey = (eventId: string,) => {
    return [`/api/ratings/events/${eventId}/statistics`] as const;
    }

    
export const getGetRatingStatisticsQueryOptions = <TData = Awaited<ReturnType<typeof getRatingStatistics>>, TError = unknown>(eventId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRatingStatistics>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRatingStatisticsQueryKey(eventId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRatingStatistics>>> = ({ signal }) => getRatingStatistics(eventId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(eventId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRatingStatistics>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRatingStatisticsQueryResult = NonNullable<Awaited<ReturnType<typeof getRatingStatistics>>>
export type GetRatingStatisticsQueryError = unknown

/**
 * @summary L·∫•y th·ªëng k√™ ƒë√°nh gi√° c·ªßa m·ªôt s·ª± ki·ªán
 */
export const useGetRatingStatistics = <TData = Awaited<ReturnType<typeof getRatingStatistics>>, TError = unknown>(
 eventId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRatingStatistics>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRatingStatisticsQueryOptions(eventId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary L·∫•y danh s√°ch ƒë√°nh gi√° b·ªã b√°o c√°o (Admin)
 */
export const getReportedRatings = (
    params?: GetReportedRatingsParams,
 signal?: AbortSignal
) => {
      
      
      return http<RatingPageResponse>(
      {url: `/api/ratings/admin/reported`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetReportedRatingsQueryKey = (params?: GetReportedRatingsParams,) => {
    return [`/api/ratings/admin/reported`, ...(params ? [params]: [])] as const;
    }

    
export const getGetReportedRatingsQueryOptions = <TData = Awaited<ReturnType<typeof getReportedRatings>>, TError = unknown>(params?: GetReportedRatingsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReportedRatings>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetReportedRatingsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getReportedRatings>>> = ({ signal }) => getReportedRatings(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getReportedRatings>>, TError, TData> & { queryKey: QueryKey }
}

export type GetReportedRatingsQueryResult = NonNullable<Awaited<ReturnType<typeof getReportedRatings>>>
export type GetReportedRatingsQueryError = unknown

/**
 * @summary L·∫•y danh s√°ch ƒë√°nh gi√° b·ªã b√°o c√°o (Admin)
 */
export const useGetReportedRatings = <TData = Awaited<ReturnType<typeof getReportedRatings>>, TError = unknown>(
 params?: GetReportedRatingsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReportedRatings>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetReportedRatingsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary L·∫•y t·∫•t c·∫£ th√¥ng b√°o c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
 */
export const getUserNotifications = (
    params: GetUserNotificationsParams,
 signal?: AbortSignal
) => {
      
      
      return http<PageNotificationResponse>(
      {url: `/api/notifications`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserNotificationsQueryKey = (params: GetUserNotificationsParams,) => {
    return [`/api/notifications`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserNotificationsQueryOptions = <TData = Awaited<ReturnType<typeof getUserNotifications>>, TError = unknown>(params: GetUserNotificationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserNotifications>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserNotificationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserNotifications>>> = ({ signal }) => getUserNotifications(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserNotifications>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUserNotificationsQueryResult = NonNullable<Awaited<ReturnType<typeof getUserNotifications>>>
export type GetUserNotificationsQueryError = unknown

/**
 * @summary L·∫•y t·∫•t c·∫£ th√¥ng b√°o c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
 */
export const useGetUserNotifications = <TData = Awaited<ReturnType<typeof getUserNotifications>>, TError = unknown>(
 params: GetUserNotificationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserNotifications>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUserNotificationsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary X√≥a t·∫•t c·∫£ th√¥ng b√°o
 */
export const deleteAllNotifications = (
    
 ) => {
      
      
      return http<DeleteAllNotifications200>(
      {url: `/api/notifications`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteAllNotificationsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAllNotifications>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteAllNotifications>>, TError,void, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAllNotifications>>, void> = () => {
          

          return  deleteAllNotifications()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAllNotificationsMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAllNotifications>>>
    
    export type DeleteAllNotificationsMutationError = unknown

    /**
 * @summary X√≥a t·∫•t c·∫£ th√¥ng b√°o
 */
export const useDeleteAllNotifications = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAllNotifications>>, TError,void, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteAllNotifications>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getDeleteAllNotificationsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary L·∫•y th√¥ng b√°o ch∆∞a ƒë·ªçc c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
 */
export const getUnreadNotifications = (
    params: GetUnreadNotificationsParams,
 signal?: AbortSignal
) => {
      
      
      return http<PageNotificationResponse>(
      {url: `/api/notifications/unread`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUnreadNotificationsQueryKey = (params: GetUnreadNotificationsParams,) => {
    return [`/api/notifications/unread`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUnreadNotificationsQueryOptions = <TData = Awaited<ReturnType<typeof getUnreadNotifications>>, TError = unknown>(params: GetUnreadNotificationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUnreadNotifications>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUnreadNotificationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUnreadNotifications>>> = ({ signal }) => getUnreadNotifications(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUnreadNotifications>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUnreadNotificationsQueryResult = NonNullable<Awaited<ReturnType<typeof getUnreadNotifications>>>
export type GetUnreadNotificationsQueryError = unknown

/**
 * @summary L·∫•y th√¥ng b√°o ch∆∞a ƒë·ªçc c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
 */
export const useGetUnreadNotifications = <TData = Awaited<ReturnType<typeof getUnreadNotifications>>, TError = unknown>(
 params: GetUnreadNotificationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUnreadNotifications>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUnreadNotificationsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary L·∫•y th√¥ng b√°o theo lo·∫°i
 */
export const getNotificationsByType = (
    type: 'ACCOUNT_ACTIVATION' | 'PASSWORD_RESET' | 'TICKET_CONFIRMATION' | 'EVENT_REMINDER' | 'NEW_COMMENT' | 'NEW_RATING' | 'TICKET_PURCHASE' | 'SYSTEM',
    params: GetNotificationsByTypeParams,
 signal?: AbortSignal
) => {
      
      
      return http<PageNotificationResponse>(
      {url: `/api/notifications/type/${type}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetNotificationsByTypeQueryKey = (type: 'ACCOUNT_ACTIVATION' | 'PASSWORD_RESET' | 'TICKET_CONFIRMATION' | 'EVENT_REMINDER' | 'NEW_COMMENT' | 'NEW_RATING' | 'TICKET_PURCHASE' | 'SYSTEM',
    params: GetNotificationsByTypeParams,) => {
    return [`/api/notifications/type/${type}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetNotificationsByTypeQueryOptions = <TData = Awaited<ReturnType<typeof getNotificationsByType>>, TError = unknown>(type: 'ACCOUNT_ACTIVATION' | 'PASSWORD_RESET' | 'TICKET_CONFIRMATION' | 'EVENT_REMINDER' | 'NEW_COMMENT' | 'NEW_RATING' | 'TICKET_PURCHASE' | 'SYSTEM',
    params: GetNotificationsByTypeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationsByType>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNotificationsByTypeQueryKey(type,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotificationsByType>>> = ({ signal }) => getNotificationsByType(type,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(type), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNotificationsByType>>, TError, TData> & { queryKey: QueryKey }
}

export type GetNotificationsByTypeQueryResult = NonNullable<Awaited<ReturnType<typeof getNotificationsByType>>>
export type GetNotificationsByTypeQueryError = unknown

/**
 * @summary L·∫•y th√¥ng b√°o theo lo·∫°i
 */
export const useGetNotificationsByType = <TData = Awaited<ReturnType<typeof getNotificationsByType>>, TError = unknown>(
 type: 'ACCOUNT_ACTIVATION' | 'PASSWORD_RESET' | 'TICKET_CONFIRMATION' | 'EVENT_REMINDER' | 'NEW_COMMENT' | 'NEW_RATING' | 'TICKET_PURCHASE' | 'SYSTEM',
    params: GetNotificationsByTypeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationsByType>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetNotificationsByTypeQueryOptions(type,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ƒê·∫øm s·ªë th√¥ng b√°o ch∆∞a ƒë·ªçc
 */
export const countUnreadNotifications = (
    
 signal?: AbortSignal
) => {
      
      
      return http<NotificationCountResponse>(
      {url: `/api/notifications/count`, method: 'GET', signal
    },
      );
    }
  

export const getCountUnreadNotificationsQueryKey = () => {
    return [`/api/notifications/count`] as const;
    }

    
export const getCountUnreadNotificationsQueryOptions = <TData = Awaited<ReturnType<typeof countUnreadNotifications>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countUnreadNotifications>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCountUnreadNotificationsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof countUnreadNotifications>>> = ({ signal }) => countUnreadNotifications(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof countUnreadNotifications>>, TError, TData> & { queryKey: QueryKey }
}

export type CountUnreadNotificationsQueryResult = NonNullable<Awaited<ReturnType<typeof countUnreadNotifications>>>
export type CountUnreadNotificationsQueryError = unknown

/**
 * @summary ƒê·∫øm s·ªë th√¥ng b√°o ch∆∞a ƒë·ªçc
 */
export const useCountUnreadNotifications = <TData = Awaited<ReturnType<typeof countUnreadNotifications>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countUnreadNotifications>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getCountUnreadNotificationsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const searchLocationsByName = (
    params: SearchLocationsByNameParams,
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponsePageLocationDto>(
      {url: `/api/locations/search`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getSearchLocationsByNameQueryKey = (params: SearchLocationsByNameParams,) => {
    return [`/api/locations/search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchLocationsByNameQueryOptions = <TData = Awaited<ReturnType<typeof searchLocationsByName>>, TError = unknown>(params: SearchLocationsByNameParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchLocationsByName>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchLocationsByNameQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchLocationsByName>>> = ({ signal }) => searchLocationsByName(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchLocationsByName>>, TError, TData> & { queryKey: QueryKey }
}

export type SearchLocationsByNameQueryResult = NonNullable<Awaited<ReturnType<typeof searchLocationsByName>>>
export type SearchLocationsByNameQueryError = unknown

export const useSearchLocationsByName = <TData = Awaited<ReturnType<typeof searchLocationsByName>>, TError = unknown>(
 params: SearchLocationsByNameParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchLocationsByName>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getSearchLocationsByNameQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getPopularLocations = (
    params?: GetPopularLocationsParams,
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponseListLocationDto>(
      {url: `/api/locations/popular`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetPopularLocationsQueryKey = (params?: GetPopularLocationsParams,) => {
    return [`/api/locations/popular`, ...(params ? [params]: [])] as const;
    }

    
export const getGetPopularLocationsQueryOptions = <TData = Awaited<ReturnType<typeof getPopularLocations>>, TError = unknown>(params?: GetPopularLocationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPopularLocations>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPopularLocationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPopularLocations>>> = ({ signal }) => getPopularLocations(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPopularLocations>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPopularLocationsQueryResult = NonNullable<Awaited<ReturnType<typeof getPopularLocations>>>
export type GetPopularLocationsQueryError = unknown

export const useGetPopularLocations = <TData = Awaited<ReturnType<typeof getPopularLocations>>, TError = unknown>(
 params?: GetPopularLocationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPopularLocations>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetPopularLocationsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getNearbyLocations = (
    params: GetNearbyLocationsParams,
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponsePageLocationDto>(
      {url: `/api/locations/nearby`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetNearbyLocationsQueryKey = (params: GetNearbyLocationsParams,) => {
    return [`/api/locations/nearby`, ...(params ? [params]: [])] as const;
    }

    
export const getGetNearbyLocationsQueryOptions = <TData = Awaited<ReturnType<typeof getNearbyLocations>>, TError = unknown>(params: GetNearbyLocationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNearbyLocations>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNearbyLocationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNearbyLocations>>> = ({ signal }) => getNearbyLocations(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNearbyLocations>>, TError, TData> & { queryKey: QueryKey }
}

export type GetNearbyLocationsQueryResult = NonNullable<Awaited<ReturnType<typeof getNearbyLocations>>>
export type GetNearbyLocationsQueryError = unknown

export const useGetNearbyLocations = <TData = Awaited<ReturnType<typeof getNearbyLocations>>, TError = unknown>(
 params: GetNearbyLocationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNearbyLocations>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetNearbyLocationsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getLocationsByCity = (
    city: string,
    params: GetLocationsByCityParams,
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponsePageLocationDto>(
      {url: `/api/locations/city/${city}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetLocationsByCityQueryKey = (city: string,
    params: GetLocationsByCityParams,) => {
    return [`/api/locations/city/${city}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLocationsByCityQueryOptions = <TData = Awaited<ReturnType<typeof getLocationsByCity>>, TError = unknown>(city: string,
    params: GetLocationsByCityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLocationsByCity>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLocationsByCityQueryKey(city,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocationsByCity>>> = ({ signal }) => getLocationsByCity(city,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(city), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLocationsByCity>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLocationsByCityQueryResult = NonNullable<Awaited<ReturnType<typeof getLocationsByCity>>>
export type GetLocationsByCityQueryError = unknown

export const useGetLocationsByCity = <TData = Awaited<ReturnType<typeof getLocationsByCity>>, TError = unknown>(
 city: string,
    params: GetLocationsByCityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLocationsByCity>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetLocationsByCityQueryOptions(city,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getFileFromFolder = (
    folder: string,
    filename: string,
 signal?: AbortSignal
) => {
      
      
      return http<Blob>(
      {url: `/api/files/${folder}/${filename}`, method: 'GET',
        responseType: 'blob', signal
    },
      );
    }
  

export const getGetFileFromFolderQueryKey = (folder: string,
    filename: string,) => {
    return [`/api/files/${folder}/${filename}`] as const;
    }

    
export const getGetFileFromFolderQueryOptions = <TData = Awaited<ReturnType<typeof getFileFromFolder>>, TError = unknown>(folder: string,
    filename: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFileFromFolder>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFileFromFolderQueryKey(folder,filename);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFileFromFolder>>> = ({ signal }) => getFileFromFolder(folder,filename, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(folder && filename), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFileFromFolder>>, TError, TData> & { queryKey: QueryKey }
}

export type GetFileFromFolderQueryResult = NonNullable<Awaited<ReturnType<typeof getFileFromFolder>>>
export type GetFileFromFolderQueryError = unknown

export const useGetFileFromFolder = <TData = Awaited<ReturnType<typeof getFileFromFolder>>, TError = unknown>(
 folder: string,
    filename: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFileFromFolder>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetFileFromFolderQueryOptions(folder,filename,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getFile = (
    filename: string,
 signal?: AbortSignal
) => {
      
      
      return http<Blob>(
      {url: `/api/files/${filename}`, method: 'GET',
        responseType: 'blob', signal
    },
      );
    }
  

export const getGetFileQueryKey = (filename: string,) => {
    return [`/api/files/${filename}`] as const;
    }

    
export const getGetFileQueryOptions = <TData = Awaited<ReturnType<typeof getFile>>, TError = unknown>(filename: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFile>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFileQueryKey(filename);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFile>>> = ({ signal }) => getFile(filename, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(filename), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFile>>, TError, TData> & { queryKey: QueryKey }
}

export type GetFileQueryResult = NonNullable<Awaited<ReturnType<typeof getFile>>>
export type GetFileQueryError = unknown

export const useGetFile = <TData = Awaited<ReturnType<typeof getFile>>, TError = unknown>(
 filename: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFile>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetFileQueryOptions(filename,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getUpcomingEvents = (
    params?: GetUpcomingEventsParams,
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponseListEventDto>(
      {url: `/api/events/upcoming`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUpcomingEventsQueryKey = (params?: GetUpcomingEventsParams,) => {
    return [`/api/events/upcoming`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUpcomingEventsQueryOptions = <TData = Awaited<ReturnType<typeof getUpcomingEvents>>, TError = unknown>(params?: GetUpcomingEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUpcomingEvents>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUpcomingEventsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUpcomingEvents>>> = ({ signal }) => getUpcomingEvents(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUpcomingEvents>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUpcomingEventsQueryResult = NonNullable<Awaited<ReturnType<typeof getUpcomingEvents>>>
export type GetUpcomingEventsQueryError = unknown

export const useGetUpcomingEvents = <TData = Awaited<ReturnType<typeof getUpcomingEvents>>, TError = unknown>(
 params?: GetUpcomingEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUpcomingEvents>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUpcomingEventsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const searchEvents = (
    params: SearchEventsParams,
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponsePageEventDto>(
      {url: `/api/events/search`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getSearchEventsQueryKey = (params: SearchEventsParams,) => {
    return [`/api/events/search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchEventsQueryOptions = <TData = Awaited<ReturnType<typeof searchEvents>>, TError = unknown>(params: SearchEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchEvents>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchEventsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchEvents>>> = ({ signal }) => searchEvents(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchEvents>>, TError, TData> & { queryKey: QueryKey }
}

export type SearchEventsQueryResult = NonNullable<Awaited<ReturnType<typeof searchEvents>>>
export type SearchEventsQueryError = unknown

export const useSearchEvents = <TData = Awaited<ReturnType<typeof searchEvents>>, TError = unknown>(
 params: SearchEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchEvents>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getSearchEventsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getEventsByOrganizer = (
    organizerId: string,
    params: GetEventsByOrganizerParams,
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponsePageEventDto>(
      {url: `/api/events/organizer/${organizerId}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetEventsByOrganizerQueryKey = (organizerId: string,
    params: GetEventsByOrganizerParams,) => {
    return [`/api/events/organizer/${organizerId}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEventsByOrganizerQueryOptions = <TData = Awaited<ReturnType<typeof getEventsByOrganizer>>, TError = unknown>(organizerId: string,
    params: GetEventsByOrganizerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsByOrganizer>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEventsByOrganizerQueryKey(organizerId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEventsByOrganizer>>> = ({ signal }) => getEventsByOrganizer(organizerId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEventsByOrganizer>>, TError, TData> & { queryKey: QueryKey }
}

export type GetEventsByOrganizerQueryResult = NonNullable<Awaited<ReturnType<typeof getEventsByOrganizer>>>
export type GetEventsByOrganizerQueryError = unknown

export const useGetEventsByOrganizer = <TData = Awaited<ReturnType<typeof getEventsByOrganizer>>, TError = unknown>(
 organizerId: string,
    params: GetEventsByOrganizerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsByOrganizer>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetEventsByOrganizerQueryOptions(organizerId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getNearbyEvents = (
    params: GetNearbyEventsParams,
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponsePageEventDto>(
      {url: `/api/events/nearby`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetNearbyEventsQueryKey = (params: GetNearbyEventsParams,) => {
    return [`/api/events/nearby`, ...(params ? [params]: [])] as const;
    }

    
export const getGetNearbyEventsQueryOptions = <TData = Awaited<ReturnType<typeof getNearbyEvents>>, TError = unknown>(params: GetNearbyEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNearbyEvents>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNearbyEventsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNearbyEvents>>> = ({ signal }) => getNearbyEvents(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNearbyEvents>>, TError, TData> & { queryKey: QueryKey }
}

export type GetNearbyEventsQueryResult = NonNullable<Awaited<ReturnType<typeof getNearbyEvents>>>
export type GetNearbyEventsQueryError = unknown

export const useGetNearbyEvents = <TData = Awaited<ReturnType<typeof getNearbyEvents>>, TError = unknown>(
 params: GetNearbyEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNearbyEvents>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetNearbyEventsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getFeaturedEvents = (
    params?: GetFeaturedEventsParams,
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponseListEventDto>(
      {url: `/api/events/featured`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetFeaturedEventsQueryKey = (params?: GetFeaturedEventsParams,) => {
    return [`/api/events/featured`, ...(params ? [params]: [])] as const;
    }

    
export const getGetFeaturedEventsQueryOptions = <TData = Awaited<ReturnType<typeof getFeaturedEvents>>, TError = unknown>(params?: GetFeaturedEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFeaturedEvents>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFeaturedEventsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFeaturedEvents>>> = ({ signal }) => getFeaturedEvents(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFeaturedEvents>>, TError, TData> & { queryKey: QueryKey }
}

export type GetFeaturedEventsQueryResult = NonNullable<Awaited<ReturnType<typeof getFeaturedEvents>>>
export type GetFeaturedEventsQueryError = unknown

export const useGetFeaturedEvents = <TData = Awaited<ReturnType<typeof getFeaturedEvents>>, TError = unknown>(
 params?: GetFeaturedEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFeaturedEvents>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetFeaturedEventsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getEventsByCategory = (
    categoryId: string,
    params: GetEventsByCategoryParams,
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponsePageEventDto>(
      {url: `/api/events/category/${categoryId}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetEventsByCategoryQueryKey = (categoryId: string,
    params: GetEventsByCategoryParams,) => {
    return [`/api/events/category/${categoryId}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEventsByCategoryQueryOptions = <TData = Awaited<ReturnType<typeof getEventsByCategory>>, TError = unknown>(categoryId: string,
    params: GetEventsByCategoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsByCategory>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEventsByCategoryQueryKey(categoryId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEventsByCategory>>> = ({ signal }) => getEventsByCategory(categoryId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(categoryId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEventsByCategory>>, TError, TData> & { queryKey: QueryKey }
}

export type GetEventsByCategoryQueryResult = NonNullable<Awaited<ReturnType<typeof getEventsByCategory>>>
export type GetEventsByCategoryQueryError = unknown

export const useGetEventsByCategory = <TData = Awaited<ReturnType<typeof getEventsByCategory>>, TError = unknown>(
 categoryId: string,
    params: GetEventsByCategoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsByCategory>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetEventsByCategoryQueryOptions(categoryId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary L·∫•y danh s√°ch ph·∫£n h·ªìi c·ªßa m·ªôt b√¨nh lu·∫≠n
 */
export const getRepliesByCommentId = (
    commentId: string,
    params?: GetRepliesByCommentIdParams,
 signal?: AbortSignal
) => {
      
      
      return http<CommentPageResponse>(
      {url: `/api/comments/${commentId}/replies`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetRepliesByCommentIdQueryKey = (commentId: string,
    params?: GetRepliesByCommentIdParams,) => {
    return [`/api/comments/${commentId}/replies`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRepliesByCommentIdQueryOptions = <TData = Awaited<ReturnType<typeof getRepliesByCommentId>>, TError = unknown>(commentId: string,
    params?: GetRepliesByCommentIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRepliesByCommentId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRepliesByCommentIdQueryKey(commentId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRepliesByCommentId>>> = ({ signal }) => getRepliesByCommentId(commentId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(commentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRepliesByCommentId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRepliesByCommentIdQueryResult = NonNullable<Awaited<ReturnType<typeof getRepliesByCommentId>>>
export type GetRepliesByCommentIdQueryError = unknown

/**
 * @summary L·∫•y danh s√°ch ph·∫£n h·ªìi c·ªßa m·ªôt b√¨nh lu·∫≠n
 */
export const useGetRepliesByCommentId = <TData = Awaited<ReturnType<typeof getRepliesByCommentId>>, TError = unknown>(
 commentId: string,
    params?: GetRepliesByCommentIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRepliesByCommentId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRepliesByCommentIdQueryOptions(commentId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary L·∫•y danh s√°ch b√¨nh lu·∫≠n c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
 */
export const getCommentsByCurrentUser = (
    params?: GetCommentsByCurrentUserParams,
 signal?: AbortSignal
) => {
      
      
      return http<CommentPageResponse>(
      {url: `/api/comments/me`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetCommentsByCurrentUserQueryKey = (params?: GetCommentsByCurrentUserParams,) => {
    return [`/api/comments/me`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCommentsByCurrentUserQueryOptions = <TData = Awaited<ReturnType<typeof getCommentsByCurrentUser>>, TError = unknown>(params?: GetCommentsByCurrentUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommentsByCurrentUser>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCommentsByCurrentUserQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommentsByCurrentUser>>> = ({ signal }) => getCommentsByCurrentUser(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCommentsByCurrentUser>>, TError, TData> & { queryKey: QueryKey }
}

export type GetCommentsByCurrentUserQueryResult = NonNullable<Awaited<ReturnType<typeof getCommentsByCurrentUser>>>
export type GetCommentsByCurrentUserQueryError = unknown

/**
 * @summary L·∫•y danh s√°ch b√¨nh lu·∫≠n c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
 */
export const useGetCommentsByCurrentUser = <TData = Awaited<ReturnType<typeof getCommentsByCurrentUser>>, TError = unknown>(
 params?: GetCommentsByCurrentUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommentsByCurrentUser>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetCommentsByCurrentUserQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary L·∫•y danh s√°ch b√¨nh lu·∫≠n g·ªëc c·ªßa m·ªôt s·ª± ki·ªán
 */
export const getRootCommentsByEventId = (
    eventId: string,
    params?: GetRootCommentsByEventIdParams,
 signal?: AbortSignal
) => {
      
      
      return http<CommentPageResponse>(
      {url: `/api/comments/events/${eventId}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetRootCommentsByEventIdQueryKey = (eventId: string,
    params?: GetRootCommentsByEventIdParams,) => {
    return [`/api/comments/events/${eventId}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRootCommentsByEventIdQueryOptions = <TData = Awaited<ReturnType<typeof getRootCommentsByEventId>>, TError = unknown>(eventId: string,
    params?: GetRootCommentsByEventIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRootCommentsByEventId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRootCommentsByEventIdQueryKey(eventId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRootCommentsByEventId>>> = ({ signal }) => getRootCommentsByEventId(eventId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(eventId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRootCommentsByEventId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRootCommentsByEventIdQueryResult = NonNullable<Awaited<ReturnType<typeof getRootCommentsByEventId>>>
export type GetRootCommentsByEventIdQueryError = unknown

/**
 * @summary L·∫•y danh s√°ch b√¨nh lu·∫≠n g·ªëc c·ªßa m·ªôt s·ª± ki·ªán
 */
export const useGetRootCommentsByEventId = <TData = Awaited<ReturnType<typeof getRootCommentsByEventId>>, TError = unknown>(
 eventId: string,
    params?: GetRootCommentsByEventIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRootCommentsByEventId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRootCommentsByEventIdQueryOptions(eventId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary L·∫•y danh s√°ch b√¨nh lu·∫≠n theo tr·∫°ng th√°i (Admin)
 */
export const getCommentsByStatus = (
    status: 'PENDING' | 'APPROVED' | 'REJECTED' | 'REPORTED',
    params?: GetCommentsByStatusParams,
 signal?: AbortSignal
) => {
      
      
      return http<CommentPageResponse>(
      {url: `/api/comments/admin/status/${status}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetCommentsByStatusQueryKey = (status: 'PENDING' | 'APPROVED' | 'REJECTED' | 'REPORTED',
    params?: GetCommentsByStatusParams,) => {
    return [`/api/comments/admin/status/${status}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCommentsByStatusQueryOptions = <TData = Awaited<ReturnType<typeof getCommentsByStatus>>, TError = unknown>(status: 'PENDING' | 'APPROVED' | 'REJECTED' | 'REPORTED',
    params?: GetCommentsByStatusParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommentsByStatus>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCommentsByStatusQueryKey(status,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommentsByStatus>>> = ({ signal }) => getCommentsByStatus(status,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(status), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCommentsByStatus>>, TError, TData> & { queryKey: QueryKey }
}

export type GetCommentsByStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getCommentsByStatus>>>
export type GetCommentsByStatusQueryError = unknown

/**
 * @summary L·∫•y danh s√°ch b√¨nh lu·∫≠n theo tr·∫°ng th√°i (Admin)
 */
export const useGetCommentsByStatus = <TData = Awaited<ReturnType<typeof getCommentsByStatus>>, TError = unknown>(
 status: 'PENDING' | 'APPROVED' | 'REJECTED' | 'REPORTED',
    params?: GetCommentsByStatusParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommentsByStatus>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetCommentsByStatusQueryOptions(status,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Ki·ªÉm tra tr·∫°ng th√°i API
 */
export const healthCheck = (
    
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponseString>(
      {url: `/api/auth/health`, method: 'GET', signal
    },
      );
    }
  

export const getHealthCheckQueryKey = () => {
    return [`/api/auth/health`] as const;
    }

    
export const getHealthCheckQueryOptions = <TData = Awaited<ReturnType<typeof healthCheck>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHealthCheckQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheck>>> = ({ signal }) => healthCheck(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData> & { queryKey: QueryKey }
}

export type HealthCheckQueryResult = NonNullable<Awaited<ReturnType<typeof healthCheck>>>
export type HealthCheckQueryError = unknown

/**
 * @summary Ki·ªÉm tra tr·∫°ng th√°i API
 */
export const useHealthCheck = <TData = Awaited<ReturnType<typeof healthCheck>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getHealthCheckQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary K√≠ch ho·∫°t t√†i kho·∫£n ng∆∞·ªùi d√πng
 */
export const activateUser1 = (
    params: ActivateUser1Params,
 signal?: AbortSignal
) => {
      
      
      return http<ApiResponseString>(
      {url: `/api/auth/activate`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getActivateUser1QueryKey = (params: ActivateUser1Params,) => {
    return [`/api/auth/activate`, ...(params ? [params]: [])] as const;
    }

    
export const getActivateUser1QueryOptions = <TData = Awaited<ReturnType<typeof activateUser1>>, TError = unknown>(params: ActivateUser1Params, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof activateUser1>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getActivateUser1QueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof activateUser1>>> = ({ signal }) => activateUser1(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof activateUser1>>, TError, TData> & { queryKey: QueryKey }
}

export type ActivateUser1QueryResult = NonNullable<Awaited<ReturnType<typeof activateUser1>>>
export type ActivateUser1QueryError = unknown

/**
 * @summary K√≠ch ho·∫°t t√†i kho·∫£n ng∆∞·ªùi d√πng
 */
export const useActivateUser1 = <TData = Awaited<ReturnType<typeof activateUser1>>, TError = unknown>(
 params: ActivateUser1Params, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof activateUser1>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getActivateUser1QueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getEventPerformance = (
    eventId: string,
 signal?: AbortSignal
) => {
      
      
      return http<EventPerformanceDto>(
      {url: `/api/analytics/performance/${eventId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetEventPerformanceQueryKey = (eventId: string,) => {
    return [`/api/analytics/performance/${eventId}`] as const;
    }

    
export const getGetEventPerformanceQueryOptions = <TData = Awaited<ReturnType<typeof getEventPerformance>>, TError = unknown>(eventId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventPerformance>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEventPerformanceQueryKey(eventId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEventPerformance>>> = ({ signal }) => getEventPerformance(eventId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(eventId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEventPerformance>>, TError, TData> & { queryKey: QueryKey }
}

export type GetEventPerformanceQueryResult = NonNullable<Awaited<ReturnType<typeof getEventPerformance>>>
export type GetEventPerformanceQueryError = unknown

export const useGetEventPerformance = <TData = Awaited<ReturnType<typeof getEventPerformance>>, TError = unknown>(
 eventId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventPerformance>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetEventPerformanceQueryOptions(eventId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getROIAnalysis = (
    eventId: string,
 signal?: AbortSignal
) => {
      
      
      return http<GetROIAnalysis200>(
      {url: `/api/analytics/performance/${eventId}/roi`, method: 'GET', signal
    },
      );
    }
  

export const getGetROIAnalysisQueryKey = (eventId: string,) => {
    return [`/api/analytics/performance/${eventId}/roi`] as const;
    }

    
export const getGetROIAnalysisQueryOptions = <TData = Awaited<ReturnType<typeof getROIAnalysis>>, TError = unknown>(eventId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getROIAnalysis>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetROIAnalysisQueryKey(eventId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getROIAnalysis>>> = ({ signal }) => getROIAnalysis(eventId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(eventId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getROIAnalysis>>, TError, TData> & { queryKey: QueryKey }
}

export type GetROIAnalysisQueryResult = NonNullable<Awaited<ReturnType<typeof getROIAnalysis>>>
export type GetROIAnalysisQueryError = unknown

export const useGetROIAnalysis = <TData = Awaited<ReturnType<typeof getROIAnalysis>>, TError = unknown>(
 eventId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getROIAnalysis>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetROIAnalysisQueryOptions(eventId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getKPIDashboard = (
    eventId: string,
 signal?: AbortSignal
) => {
      
      
      return http<GetKPIDashboard200>(
      {url: `/api/analytics/performance/${eventId}/kpi`, method: 'GET', signal
    },
      );
    }
  

export const getGetKPIDashboardQueryKey = (eventId: string,) => {
    return [`/api/analytics/performance/${eventId}/kpi`] as const;
    }

    
export const getGetKPIDashboardQueryOptions = <TData = Awaited<ReturnType<typeof getKPIDashboard>>, TError = unknown>(eventId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getKPIDashboard>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetKPIDashboardQueryKey(eventId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getKPIDashboard>>> = ({ signal }) => getKPIDashboard(eventId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(eventId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getKPIDashboard>>, TError, TData> & { queryKey: QueryKey }
}

export type GetKPIDashboardQueryResult = NonNullable<Awaited<ReturnType<typeof getKPIDashboard>>>
export type GetKPIDashboardQueryError = unknown

export const useGetKPIDashboard = <TData = Awaited<ReturnType<typeof getKPIDashboard>>, TError = unknown>(
 eventId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getKPIDashboard>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetKPIDashboardQueryOptions(eventId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getPaymentMethodsAnalysis = (
    eventId: string,
 signal?: AbortSignal
) => {
      
      
      return http<PaymentMethodsDto>(
      {url: `/api/analytics/payment/methods/${eventId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetPaymentMethodsAnalysisQueryKey = (eventId: string,) => {
    return [`/api/analytics/payment/methods/${eventId}`] as const;
    }

    
export const getGetPaymentMethodsAnalysisQueryOptions = <TData = Awaited<ReturnType<typeof getPaymentMethodsAnalysis>>, TError = unknown>(eventId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPaymentMethodsAnalysis>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPaymentMethodsAnalysisQueryKey(eventId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPaymentMethodsAnalysis>>> = ({ signal }) => getPaymentMethodsAnalysis(eventId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(eventId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPaymentMethodsAnalysis>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPaymentMethodsAnalysisQueryResult = NonNullable<Awaited<ReturnType<typeof getPaymentMethodsAnalysis>>>
export type GetPaymentMethodsAnalysisQueryError = unknown

export const useGetPaymentMethodsAnalysis = <TData = Awaited<ReturnType<typeof getPaymentMethodsAnalysis>>, TError = unknown>(
 eventId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPaymentMethodsAnalysis>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetPaymentMethodsAnalysisQueryOptions(eventId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getAttendeeAnalytics = (
    eventId: string,
 signal?: AbortSignal
) => {
      
      
      return http<AttendeeAnalyticsDto>(
      {url: `/api/analytics/attendee/${eventId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetAttendeeAnalyticsQueryKey = (eventId: string,) => {
    return [`/api/analytics/attendee/${eventId}`] as const;
    }

    
export const getGetAttendeeAnalyticsQueryOptions = <TData = Awaited<ReturnType<typeof getAttendeeAnalytics>>, TError = unknown>(eventId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttendeeAnalytics>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAttendeeAnalyticsQueryKey(eventId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAttendeeAnalytics>>> = ({ signal }) => getAttendeeAnalytics(eventId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(eventId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAttendeeAnalytics>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAttendeeAnalyticsQueryResult = NonNullable<Awaited<ReturnType<typeof getAttendeeAnalytics>>>
export type GetAttendeeAnalyticsQueryError = unknown

export const useGetAttendeeAnalytics = <TData = Awaited<ReturnType<typeof getAttendeeAnalytics>>, TError = unknown>(
 eventId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttendeeAnalytics>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAttendeeAnalyticsQueryOptions(eventId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getRegistrationTimeline = (
    eventId: string,
 signal?: AbortSignal
) => {
      
      
      return http<GetRegistrationTimeline200>(
      {url: `/api/analytics/attendee/${eventId}/timeline`, method: 'GET', signal
    },
      );
    }
  

export const getGetRegistrationTimelineQueryKey = (eventId: string,) => {
    return [`/api/analytics/attendee/${eventId}/timeline`] as const;
    }

    
export const getGetRegistrationTimelineQueryOptions = <TData = Awaited<ReturnType<typeof getRegistrationTimeline>>, TError = unknown>(eventId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRegistrationTimeline>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRegistrationTimelineQueryKey(eventId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRegistrationTimeline>>> = ({ signal }) => getRegistrationTimeline(eventId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(eventId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRegistrationTimeline>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRegistrationTimelineQueryResult = NonNullable<Awaited<ReturnType<typeof getRegistrationTimeline>>>
export type GetRegistrationTimelineQueryError = unknown

export const useGetRegistrationTimeline = <TData = Awaited<ReturnType<typeof getRegistrationTimeline>>, TError = unknown>(
 eventId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRegistrationTimeline>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRegistrationTimelineQueryOptions(eventId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getDetailedDemographics = (
    eventId: string,
 signal?: AbortSignal
) => {
      
      
      return http<GetDetailedDemographics200>(
      {url: `/api/analytics/attendee/${eventId}/demographics`, method: 'GET', signal
    },
      );
    }
  

export const getGetDetailedDemographicsQueryKey = (eventId: string,) => {
    return [`/api/analytics/attendee/${eventId}/demographics`] as const;
    }

    
export const getGetDetailedDemographicsQueryOptions = <TData = Awaited<ReturnType<typeof getDetailedDemographics>>, TError = unknown>(eventId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDetailedDemographics>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDetailedDemographicsQueryKey(eventId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDetailedDemographics>>> = ({ signal }) => getDetailedDemographics(eventId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(eventId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDetailedDemographics>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDetailedDemographicsQueryResult = NonNullable<Awaited<ReturnType<typeof getDetailedDemographics>>>
export type GetDetailedDemographicsQueryError = unknown

export const useGetDetailedDemographics = <TData = Awaited<ReturnType<typeof getDetailedDemographics>>, TError = unknown>(
 eventId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDetailedDemographics>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetDetailedDemographicsQueryOptions(eventId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary X√≥a th√¥ng b√°o
 */
export const deleteNotification = (
    notificationId: string,
 ) => {
      
      
      return http<void>(
      {url: `/api/notifications/${notificationId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteNotificationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteNotification>>, TError,{notificationId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteNotification>>, TError,{notificationId: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteNotification>>, {notificationId: string}> = (props) => {
          const {notificationId} = props ?? {};

          return  deleteNotification(notificationId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteNotificationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteNotification>>>
    
    export type DeleteNotificationMutationError = unknown

    /**
 * @summary X√≥a th√¥ng b√°o
 */
export const useDeleteNotification = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteNotification>>, TError,{notificationId: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteNotification>>,
        TError,
        {notificationId: string},
        TContext
      > => {

      const mutationOptions = getDeleteNotificationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary X√≥a token thi·∫øt b·ªã
 */
export const deleteDeviceToken = (
    tokenId: string,
 ) => {
      
      
      return http<void>(
      {url: `/api/notifications/devices/${tokenId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteDeviceTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDeviceToken>>, TError,{tokenId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteDeviceToken>>, TError,{tokenId: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDeviceToken>>, {tokenId: string}> = (props) => {
          const {tokenId} = props ?? {};

          return  deleteDeviceToken(tokenId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDeviceTokenMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDeviceToken>>>
    
    export type DeleteDeviceTokenMutationError = unknown

    /**
 * @summary X√≥a token thi·∫øt b·ªã
 */
export const useDeleteDeviceToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDeviceToken>>, TError,{tokenId: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDeviceToken>>,
        TError,
        {tokenId: string},
        TContext
      > => {

      const mutationOptions = getDeleteDeviceTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteEventImage = (
    id: string,
    imageId: string,
 ) => {
      
      
      return http<ApiResponseBoolean>(
      {url: `/api/events/${id}/images/${imageId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteEventImageMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEventImage>>, TError,{id: string;imageId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteEventImage>>, TError,{id: string;imageId: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEventImage>>, {id: string;imageId: string}> = (props) => {
          const {id,imageId} = props ?? {};

          return  deleteEventImage(id,imageId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEventImageMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEventImage>>>
    
    export type DeleteEventImageMutationError = unknown

    export const useDeleteEventImage = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEventImage>>, TError,{id: string;imageId: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEventImage>>,
        TError,
        {id: string;imageId: string},
        TContext
      > => {

      const mutationOptions = getDeleteEventImageMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary X√≥a token thi·∫øt b·ªã
 */
export const deleteDeviceToken1 = (
    tokenId: string,
 ) => {
      
      
      return http<ApiResponseBoolean>(
      {url: `/api/devices/tokens/${tokenId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteDeviceToken1MutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDeviceToken1>>, TError,{tokenId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteDeviceToken1>>, TError,{tokenId: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDeviceToken1>>, {tokenId: string}> = (props) => {
          const {tokenId} = props ?? {};

          return  deleteDeviceToken1(tokenId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDeviceToken1MutationResult = NonNullable<Awaited<ReturnType<typeof deleteDeviceToken1>>>
    
    export type DeleteDeviceToken1MutationError = unknown

    /**
 * @summary X√≥a token thi·∫øt b·ªã
 */
export const useDeleteDeviceToken1 = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDeviceToken1>>, TError,{tokenId: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDeviceToken1>>,
        TError,
        {tokenId: string},
        TContext
      > => {

      const mutationOptions = getDeleteDeviceToken1MutationOptions(options);

      return useMutation(mutationOptions);
    }
    
